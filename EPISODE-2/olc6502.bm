
SUB reset_6502 ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER




    addr_abs = &HFFFC~%
    lo = read_from_bus(addr_abs + 0)
    hi = read_from_bus(addr_abs + 1)

    cpu_regs.pc = _SHL(hi, 8) OR lo
    cpu_regs.a_reg = &H00
    cpu_regs.x_reg = &H00
    cpu_regs.y_reg = &H00
    cpu_regs.stkp = &HFD

    cpu_regs.status = &H00 OR cpu_regs.flags.U




    addr_rel = &H0000
    addr_abs = &H0000
    fetched = &H00

    cycles = 8

END SUB


SUB cpu_Clock
    'SHARED opcode AS _UNSIGNED _BYTE
    'SHARED cpu_regs AS regs_6502
    'SHARED cycles AS _UNSIGNED _BYTE


    DIM additional_cycle1 AS _UNSIGNED _BYTE
    DIM additional_cycle2 AS _UNSIGNED _BYTE

    IF cycles = 0 THEN


        opcode = read_from_bus(cpu_regs.pc)
        set_flag cpu_regs.flags.U, 1



        cpu_regs.pc = cpu_regs.pc + 1
        cycles = instructions(opcode).cycles

         execute_instruction additional_cycle1,additional_cycle2,opcode


        cycles = cycles + (additional_cycle1 AND additional_cycle2)
          '_title str$(addr_abs)


         set_flag cpu_regs.flags.U,1



    END IF

    'clock_cycles = TIMER

    cycles = cycles - 1
END SUB




FUNCTION complete        'tested-WORKS FINE
    'SHARED cycles AS _UNSIGNED _BYTE

    complete = cycles = 0

END FUNCTION



SUB set_flag (f AS _UNSIGNED _BYTE, bool AS _UNSIGNED _BYTE)
    'SHARED cpu_regs AS regs_6502
    IF bool THEN
        cpu_regs.status = cpu_regs.status OR f
    ELSE
        cpu_regs.status = cpu_regs.status AND NOT f


    END IF


END SUB



FUNCTION get_flag (f AS _UNSIGNED _BYTE)
    'SHARED cpu_regs AS regs_6502

    IF cpu_regs.status AND f THEN
        get_flag = 1
    ELSE
        get_flag = 0
    END IF

END FUNCTION

'----------------------------------------------  'tested-WORKS FINE
SUB fetch
    'SHARED opcode AS _UNSIGNED _BYTE
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    'not finshed  WIP
    IF NOT instructions(opcode).addrmode = addr_mode_IMP THEN
        fetched = read_from_bus(addr_abs)
    END IF


END SUB
''----------------------------------------------



SUB irq ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER



    DIM hi AS _UNSIGNED INTEGER
    DIM lo AS _UNSIGNED INTEGER

    IF get_flag(cpu_regs.flags.I) = 0 THEN


        write_to_bus &H0100 + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF
        cpu_regs.stkp = cpu_regs.stkp - 1
        write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.pc AND &H00FF
        cpu_regs.stkp = cpu_regs.stkp - 1
        set_flag cpu_regs.flags.B, 0
        set_flag cpu_regs.flags.U, 1
        set_flag cpu_regs.flags.I, 1
        write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.status
        cpu_regs.stkp = cpu_regs.stkp - 1
        addr_abs = &HFFFE~%
        lo = read_from_bus(addr_abs + 0)
        hi = read_from_bus(addr_abs + 1)
        cpu_regs.pc = _SHL(hi, 8) OR lo


        cycles = 7
    END IF


END SUB


SUB nmi ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER


    DIM hi AS _UNSIGNED INTEGER
    DIM lo AS _UNSIGNED INTEGER



    write_to_bus &H0100~% + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF~%
    cpu_regs.stkp = cpu_regs.stkp - 1
    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.pc AND &H00FF~%
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 0
    set_flag cpu_regs.flags.U, 1
    set_flag cpu_regs.flags.I, 1
    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.status
    cpu_regs.stkp = cpu_regs.stkp - 1
    addr_abs = &HFFFA~%
    lo = read_from_bus(addr_abs + 0)
    hi = read_from_bus(addr_abs + 1)
    cpu_regs.pc = _SHL(hi, 8) OR lo


    cycles = 8

END SUB


FUNCTION hex_range$ (num1 AS _UNSIGNED LONG, num2 AS _UNSIGNED _BYTE)
       dim   num AS _UNSIGNED LONG
    s$ = STRING$(num2, "0")
     num = num1
    FOR i& = num2 - 1 TO 0 STEP -1
        'WHILE i& >= 0
        MID$(s$, i& + 1, 1) = MID$("0123456789ABCDEF", (num AND 15) + 1, 1)

        num = _SHR(num, 4)


    NEXT i&
    hex_range$ = s$

END FUNCTION
FUNCTION read_from_bus (addr AS _UNSIGNED INTEGER)

    read_from_bus = bus_read(addr, 0)

END FUNCTION



SUB write_to_bus (addr AS _UNSIGNED INTEGER, d AS _UNSIGNED _BYTE)

    bus_write addr, d

END SUB

FUNCTION Bin_range$ (num1 AS _UNSIGNED LONG, num2 AS _UNSIGNED _BYTE)
    s$ = STRING$(num2, "0")

    FOR i& = num2 - 1 TO 0 STEP -1
        'WHILE i& >= 0
        MID$(s$, i& + 1, 1) = MID$("01", (num1 AND 1) + 1, 1)

        num1 = _SHR(num1, 1)


    NEXT i&
    Bin_range$ = s$
END FUNCTION

SUB disassemble (maparray() AS STRING, nStart AS _UNSIGNED INTEGER, nStop AS _UNSIGNED INTEGER)
    DIM addr AS _UNSIGNED LONG
    DIM value AS _UNSIGNED _BYTE
    DIM value_sgn AS _BYTE
    DIM lo AS _UNSIGNED _BYTE
    DIM hi AS _UNSIGNED _BYTE
    DIM op AS _UNSIGNED _BYTE

    DIM line_addr AS _UNSIGNED INTEGER
    DIM sInst AS STRING

    addr = nStart
    WHILE addr <= nStop

        line_addr = addr

        sInst = "$" + hex_range(addr, 4) + ": "
        op = bus_read(addr, 1)

        addr = addr + 1



        sInst = sInst + instructions(op).op_name + " "
        IF instructions(op).addrmode = addr_mode_IMP THEN
            sInst = sInst + " {IMP}"
        ELSEIF instructions(op).addrmode = add_mode_IMM THEN
            value = bus_read(addr, 1)
            addr = addr + 1
            sInst = sInst + "#$" + hex_range(value, 2) + " {IMM}"
        ELSEIF instructions(op).addrmode = add_mode_ABS THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = bus_read(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + " {ABS}"
        ELSEIF instructions(op).addrmode = add_mode_ZPO THEN

            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + " {ZPO}"
        ELSEIF instructions(op).addrmode = addr_mode_ZPX THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + ", X {ZPX}"
        ELSEIF instructions(op).addrmode = add_mode_ZPY THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + ", Y {ZPY}"
        ELSEIF instructions(op).addrmode = add_mode_IZX THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "($" + hex_range(lo, 2) + ", X) {IZX}"
        ELSEIF instructions(op).addrmode = addr_mode_IZY THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "($" + hex_range(lo, 2) + ", Y) {IZY}"
        ELSEIF instructions(op).addrmode = add_mode_ABX THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = bus_read(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + ", X {ABX}"
        ELSEIF instructions(op).addrmode = add_mode_ABY THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = bus_read(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + ", Y {ABY}"
        ELSEIF instructions(op).addrmode = addr_mode_IND THEN
            lo = bus_read(addr, 1)
            addr = addr + 1
            hi = bus_read(addr, 1)
            addr = addr + 1
            sInst = sInst + "($" + hex_range(_SHL(hi, 8) OR lo, 4) + ") {IND}"
        ELSEIF instructions(op).addrmode = add_mode_REL THEN
            value = bus_read(addr, 1)
            value_sgn = value
            addr = addr + 1
            sInst = sInst + "$" + hex_range(value, 2) + " [$" + hex_range(addr + value_sgn, 4) + "] {REL}"


        END IF

        maparray(line_addr) = sInst

    WEND

 '   maparray(65536) = " "


END SUB


'$include: 'addressmodes_6502.bm'
'$include: 'instructions_6502.bm'




