'uint8_t ADC();  uint8_t AND();  uint8_t ASL();  uint8_t BCC();
'uint8_t BCS();  uint8_t BEQ();  uint8_t BIT();  uint8_t BMI();
'uint8_t BNE();  uint8_t BPL();  uint8_t BRK();  uint8_t BVC();
'uint8_t BVS();  uint8_t CLC();  uint8_t CLD();  uint8_t CLI();
'uint8_t CLV();  uint8_t CMP();  uint8_t CPX();  uint8_t CPY();
'uint8_t DEC();  uint8_t DEX();  uint8_t DEY();  uint8_t EOR();
'uint8_t INC();  uint8_t INX();  uint8_t INY();  uint8_t JMP();
'uint8_t JSR();  uint8_t LDA();  uint8_t LDX();  uint8_t LDY();
'uint8_t LSR();  uint8_t NOP();  uint8_t ORA();  uint8_t PHA();
'uint8_t PHP();  uint8_t PLA();  uint8_t PLP();  uint8_t ROL();
'uint8_t ROR();  uint8_t RTI();  uint8_t RTS();  uint8_t SBC();
'uint8_t SEC();  uint8_t SED();  uint8_t SEI();  uint8_t STA();
'uint8_t STX();  uint8_t STY();  uint8_t TAX();  uint8_t TAY();
'uint8_t TSX();  uint8_t TXA();  uint8_t TXS();  uint8_t TYA();


'uint8_t XXX();



'uint8_t IMP();  uint8_t IMM();
'uint8_t ZP0();  uint8_t ZPX();
'uint8_t ZPY();  uint8_t REL();
'uint8_t ABS();  uint8_t ABX();
'uint8_t ABY();  uint8_t IND();
'uint8_t IZX();  uint8_t IZY();


'A instructions----------------------COMPLETE needs testing

FUNCTION ADC~%
    ''SHARED cpu_regs AS regs_6502
    ''SHARED addr_abs AS _UNSIGNED INTEGER
    ''SHARED addr_rel AS _UNSIGNED INTEGER
    ''SHARED fetched AS _UNSIGNED _BYTE
    ''SHARED temp AS _UNSIGNED INTEGER

    fetch 'warning! not finished
    temp = cpu_regs.a_reg + fetched + get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C, abs(temp > 255)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF) = 0)
    set_flag cpu_regs.flags.V, abs((NOT (cpu_regs.a_reg XOR fetched) AND (cpu_regs.a_reg XOR temp) AND &H0080))   'idk if this needs right  bit shift
    set_flag cpu_regs.flags.N,  _shr((temp and &H80),7)
    cpu_regs.a_reg =abs(temp AND &H00FF)
    ADC~% = 1


END FUNCTION



FUNCTION SBC~%
    ''SHARED cpu_regs AS regs_6502
    'DIM value AS _UNSIGNED INTEGER
    ''SHARED addr_abs AS _UNSIGNED INTEGER
    ''SHARED addr_rel AS _UNSIGNED INTEGER
    ''SHARED fetched AS _UNSIGNED _BYTE
    ''SHARED temp AS _UNSIGNED INTEGER



    'fetch

    value = fetched XOR &H00FF

    temp = cpu_regs.a_reg + value + get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C, _shr(temp AND 255,7)
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = 0
    set_flag cpu_regs.flags.V, (temp XOR cpu_regs.a_reg) AND (temp XOR value) AND &H0080 'idk if needs right bit shift
    set_flag cpu_regs.flags.N,  _shr((temp and &H80),7)
    cpu_regs.a_reg = temp AND &H00FF

    SBC~% = 1


END FUNCTION



FUNCTION aAND~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch
    cpu_regs.a_reg = cpu_regs.a_reg AND fetched

    set_flag cpu_regs.flags.Z, cpu_regs.a_reg = &H0
    set_flag cpu_regs.flags.N, _shr(cpu_regs.a_reg AND &H80,7)

    aAND = 1


END FUNCTION

FUNCTION ASL~%     '--------------works as expected for now COMPLETE
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch
    temp = _SHL(fetched, 1)
    set_flag cpu_regs.flags.C, abs((temp AND &HFF00) > 0)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF) = 0)
    set_flag cpu_regs.flags.N, temp and &H80

    IF instructions(opcode).addrmode  = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF
    ELSE
        write_to_bus addr_abs, temp AND &H00FF
    END IF

       ASL~% = 0

END FUNCTION
'------------------------------------------------

'B instructions------------------------COMPLETE needs testing
FUNCTION BCC~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE



    IF get_flag(cpu_regs.flags.C) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
     BCC~% = 0

END FUNCTION

FUNCTION BCS~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE


    IF get_flag(cpu_regs.flags.C) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF



     BCS~%  = 0
END FUNCTION

FUNCTION BEQ~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.Z) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
    BEQ~% = 0
END FUNCTION




FUNCTION BIT~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER



    fetch

    temp = cpu_regs.a_reg AND fetched
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H00
    set_flag cpu_regs.flags.N, fetched AND _SHL(1, 7)
    set_flag cpu_regs.flags.V, fetched AND _SHL(1, 6)


      BIT~% = 0
END FUNCTION

FUNCTION BMI~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.N) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF

     BMI~%  = 0

END FUNCTION

FUNCTION BNE~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.Z) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
    BNE~% = 0
END FUNCTION


FUNCTION BPL~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.N) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF

    BPL~% = 0


END FUNCTION

FUNCTION BRK~%    'tested-WORKS FINE-sortof
    'SHARED cpu_regs AS regs_6502

     cpu_regs.pc = cpu_regs.pc + 1
    set_flag cpu_regs.flags.I, 1
    write_to_bus &H0100 + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF
    cpu_regs.stkp = cpu_regs.stkp - 1
    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.pc AND &H00FF
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 1
    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.status
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 0

   '  ram(02) = &H1E
    ' _title(str$(ram(03)))
    cpu_regs.pc = read_from_bus(&HFFFE) OR _SHL(read_from_bus(&HFFFF), 8)

      BRK~% = 0
END FUNCTION


FUNCTION BVC~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.V) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF


      BVC~% = 0

END FUNCTION



FUNCTION BVS~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE




    IF get_flag(cpu_regs.flags.V) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00) <> (cpu_regs.pc AND &HFF00) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF


     BVS~% = 0

END FUNCTION
'----------------------------------------------------



'C instructions ---------------------COMPLETE needs testing
FUNCTION CLC~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.C, 0


      CLC~% = 0
END FUNCTION

FUNCTION CLD~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.D, 0

    CLD~%  = 0
END FUNCTION

FUNCTION CLI~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.I, 0
    CLI~% = 0
END FUNCTION

FUNCTION CLV~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.V, 0
      CLV~% = 0
END FUNCTION

FUNCTION CMP~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch

    temp = cpu_regs.a_reg - fetched
    set_flag cpu_regs.flags.C, cpu_regs.a_reg >= fetched
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H00
    set_flag cpu_regs.flags.N, temp and &H0080


    CMP~% = 1
END FUNCTION


FUNCTION CPX~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch

    temp = cpu_regs.x_reg - fetched
    set_flag cpu_regs.flags.C, cpu_regs.x_reg >= fetched
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H00
    set_flag cpu_regs.flags.N,  temp and &H0080


    CPX~% = 0
END FUNCTION




FUNCTION CPY~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch

    temp = cpu_regs.y_reg - fetched
    set_flag cpu_regs.flags.C, cpu_regs.y_reg >= fetched
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H00
    set_flag cpu_regs.flags.N, temp and &H0080


    CPY~% = 0

END FUNCTION


'---------------------------------------


'D instructions------------------------------COMPLETE needs testing
FUNCTION DEC~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch

    temp = fetched - 1
    write_to_bus addr_abs, temp AND &H00FF
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H0000
    set_flag cpu_regs.flags.N,  temp and &H00FF
    DEC~% = 0
END FUNCTION

FUNCTION DEX~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.x_reg = cpu_regs.x_reg - 1
    set_flag cpu_regs.flags.Z, abs(cpu_regs.x_reg = &H00)

    set_flag cpu_regs.flags.N, cpu_regs.x_reg AND &H80
    DEX~% = 0
END FUNCTION

FUNCTION DEY~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.y_reg = cpu_regs.y_reg - 1
    set_flag cpu_regs.flags.Z,abs( cpu_regs.y_reg = &H00)

    set_flag cpu_regs.flags.N, cpu_regs.y_reg AND &H80
    DEY~% = 0
END FUNCTION
'------------------------------------------------






'E instruction-----------------------COMPLETE needs testing
FUNCTION EOR~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch

    cpu_regs.a_reg = cpu_regs.a_reg XOR fetched
    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00)
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg = &H80)

    EOR~% = 1

END FUNCTION


'------------------------------------

'I instruction-----------------------COMPLETE needs testing
FUNCTION INC~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch
    temp = fetched + 1
    write_to_bus addr_abs, temp AND &H00FF
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF) = &H0000)
    set_flag cpu_regs.flags.N, temp and &H0080

    INC~% = 0

END FUNCTION


FUNCTION INX~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.x_reg = cpu_regs.x_reg + 1
    set_flag cpu_regs.flags.Z, cpu_regs.x_reg = &H00

    set_flag cpu_regs.flags.N, cpu_regs.x_reg AND &H80
    INX~% = 0
END FUNCTION

FUNCTION INY~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.y_reg = cpu_regs.y_reg + 1
    set_flag cpu_regs.flags.Z, cpu_regs.y_reg = &H00

    set_flag cpu_regs.flags.N, cpu_regs.y_reg AND &H80
    INY~% = 0
END FUNCTION

'------------------------------------


'J instructions---------------------COMPLETE needs testing

FUNCTION JMP~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE



    cpu_regs.pc = addr_abs
    JMP~% = 0
END FUNCTION


FUNCTION JSR~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE



    cpu_regs.pc = cpu_regs.pc - 1
    write_to_bus &H0100 + cpu_regs.stkp, (_SHR(cpu_regs.pc, 8)) AND &H00FF
    cpu_regs.stkp = cpu_regs.stkp - 1
    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.pc AND &H00FF
    cpu_regs.pc = addr_abs
    JSR~% = 0

END FUNCTION



'-----------------------------------


'L instructions---------------COMPLETE needs testing
FUNCTION LDA~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch
    cpu_regs.a_reg = fetched
 '   _title(str$( cpu_regs.a_reg = &H00))
    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00)

    set_flag cpu_regs.flags.N,cpu_regs.a_reg AND &H80
    LDA~% = 1
END FUNCTION


FUNCTION LDX~%     'tested-WORKS FINE
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch
    cpu_regs.x_reg = fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.x_reg = &H00)

    set_flag cpu_regs.flags.N, _shr(cpu_regs.x_reg AND &H80,7)
    LDX~% = 1
END FUNCTION

FUNCTION LDY~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch
    cpu_regs.y_reg = fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.y_reg = &H00)

    set_flag cpu_regs.flags.N, cpu_regs.y_reg AND &H80
    LDY~% = 1
END FUNCTION

FUNCTION LSR~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch

    set_flag cpu_regs.flags.C, fetched AND &H0001

    temp = _SHL(fetched, 1)

    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H0000
    set_flag cpu_regs.flags.N, _shr((temp and &H0080),7)
    IF instructions(opcode).addrmode   = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF
    ELSE
        write_to_bus addr_abs, temp AND &H00FF

    END IF


    LSR~% = 0
END FUNCTION

'------------------------------


'N instructions-----------COMPLETE needs testing
FUNCTION NOP~%
    'SHARED opcode AS _UNSIGNED _BYTE
  '  opcode = &H00
    SELECT CASE opcode

        CASE &H1C
        CASE &H3C
        CASE &H5C
        CASE &H7C
        CASE &HDC
        CASE &HFC
        CASE ELSE
            '   NOP~% = 1
    END SELECT
    NOP~% = 0
END FUNCTION

'----------------------------


'O instructions------------------COMPLETE needs testing

FUNCTION ORA~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    fetch

    cpu_regs.a_reg = cpu_regs.a_reg OR fetched

    set_flag cpu_regs.flags.Z, cpu_regs.a_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.a_reg AND &H80


    ORA~% = 1
END FUNCTION

'--------------------------------


'P instructions----------------------COMPLETE needs testing

FUNCTION PHA~%
    'SHARED cpu_regs AS regs_6502
    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.a_reg
    cpu_regs.stkp = cpu_regs.stkp - 1
    PHA~% = 0
END FUNCTION


FUNCTION PHP~%
    'SHARED cpu_regs AS regs_6502

    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.status OR cpu_regs.flags.B OR cpu_regs.flags.U
    set_flag cpu_regs.flags.B, 0
    set_flag cpu_regs.flags.U, 0
    cpu_regs.stkp = cpu_regs.stkp - 1
    PHP~% = 0

END FUNCTION




FUNCTION PLA~%
    'SHARED cpu_regs AS regs_6502

    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.a_reg = read_from_bus(&H0100 + cpu_regs.stkp)
    set_flag cpu_regs.flags.Z, cpu_regs.a_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.a_reg and &H0080
    PLA~% = 0


END FUNCTION


FUNCTION PLP~%
    'SHARED cpu_regs AS regs_6502

    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.status = read_from_bus(&H0100 + cpu_regs.stkp)
    set_flag cpu_regs.flags.U, 1
    PLP~% = 0


END FUNCTION







'-----------------------------------



'R instructions----------------------COMPLETE needs testing





FUNCTION ROL~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER



    fetch
    temp = _SHL(fetched, 1) OR get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C, (temp AND &HFF00)
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H0000
    set_flag cpu_regs.flags.N, temp AND &H0080

    IF instructions(opcode).addrmode   = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF
    ELSE
        write_to_bus addr_abs, temp AND &H00FF
    END IF
     ROL~%  = 0

END FUNCTION


FUNCTION ROR~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED temp AS _UNSIGNED INTEGER


    fetch
    temp = _SHL(get_flag(cpu_regs.flags.C), 7) OR _SHR(fetched, 1)
    set_flag cpu_regs.flags.C, (temp AND &H01)
    set_flag cpu_regs.flags.Z, (temp AND &H00FF) = &H0000
    set_flag cpu_regs.flags.N, temp AND &H0080

    IF instructions(opcode).addrmode   = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF
    ELSE
        write_to_bus addr_abs, temp AND &H00FF
    END IF

      ROR~%  = 0

END FUNCTION




FUNCTION RTI~%
    'SHARED cpu_regs AS regs_6502

    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.status = read_from_bus(&H0100 + cpu_regs.stkp)
    cpu_regs.status = cpu_regs.status and NOT cpu_regs.flags.B
    cpu_regs.status = cpu_regs.status and NOT cpu_regs.flags.U

    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.pc = read_from_bus(&H0100 + cpu_regs.stkp)
    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.pc = cpu_regs.pc OR _SHL(read_from_bus(&H0100 + cpu_regs.stkp), 8)
    RTI~% = 0

END FUNCTION


FUNCTION RTS~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.stkp = cpu_regs.stkp + 1
    pc = read_from_bus(&H0100 + cpu_regs.stkp)
    cpu_regs.stkp = cpu_regs.stkp + 1
    pc = pc OR _SHL(read_from_bus(&H0100 + cpu_regs.stkp), 8)


    cpu_regs.pc = cpu_regs.pc + 1

    RTS~% = 0
END FUNCTION







'-----------------------------------


'S instructions----------------------COMPLETE needs testing

FUNCTION SEC~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.C, 1
    SEC~% = 0
END FUNCTION


FUNCTION SEI~%  'tested-WORKS FINE
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.I, 1
    SEI~%  = 0
END FUNCTION

FUNCTION SED~%
    'SHARED cpu_regs AS regs_6502

    set_flag cpu_regs.flags.D, 1

     SED~% = 0

END FUNCTION

FUNCTION STA~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE



    write_to_bus addr_abs, cpu_regs.a_reg
    STA~% =0

END FUNCTION

FUNCTION STX~%
    'SHARED cpu_regs AS regs_6502

    write_to_bus addr_abs, cpu_regs.x_reg
    STX~% =0



    END FUNCTION

FUNCTION STY~%
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE


    write_to_bus addr_abs, cpu_regs.y_reg

    STY~% =0



END FUNCTION

'-------------------------------------






'T instructions-------------------------------------COMPLETE needs testing
FUNCTION TAX%
    'SHARED cpu_regs AS regs_6502
    cpu_regs.x_reg = cpu_regs.a_reg


    set_flag cpu_regs.flags.Z, cpu_regs.x_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.x_reg AND &H80

     TAX%  = 0
END FUNCTION

FUNCTION TAY%
    'SHARED cpu_regs AS regs_6502
    cpu_regs.y_reg = cpu_regs.a_reg


    set_flag cpu_regs.flags.Z, cpu_regs.y_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.y_reg AND &H80

    TAY%  = 0

END FUNCTION


FUNCTION TSX%
    'SHARED cpu_regs AS regs_6502
    cpu_regs.x_reg = cpu_regs.stkp


    set_flag cpu_regs.flags.Z, cpu_regs.x_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.x_reg AND &H8
     TSX% = 0
END FUNCTION






FUNCTION TXA~%
    'SHARED cpu_regs AS regs_6502
    cpu_regs.a_reg = cpu_regs.x_reg


    set_flag cpu_regs.flags.Z, cpu_regs.a_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.a_reg AND &H80
     TXA~% = 0
END FUNCTION





FUNCTION TXS~%
    'SHARED cpu_regs AS regs_6502

    cpu_regs.stkp = cpu_regs.x_reg
    TXS~% = 0
END FUNCTION


FUNCTION TYA~%
    'SHARED cpu_regs AS regs_6502
    cpu_regs.a_reg = cpu_regs.y_reg


    set_flag cpu_regs.flags.Z, cpu_regs.a_reg = &H00
    set_flag cpu_regs.flags.N, cpu_regs.a_reg AND &H80
     TYA~% = 0
END FUNCTION

'---------------------------------------------------------



'NOP------------------------------------------------------COMPLETE needs testing
FUNCTION XXX~%
    XXX~%  = 0
END FUNCTION

'-------------------------------------

sub execute_instruction(additional_cycle1 as _unsigned _byte,additional_cycle2 as _unsigned _byte,op as _unsigned _byte)
        select case op
        case &H00:  ' BRK
        additional_cycle1 = addr_IMM
        additional_cycle2 = BRK

        case &H01  ' ORA
        additional_cycle1 = add_IZX
        additional_cycle2 = ORA

        case &H02  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H03  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H04  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H05  ' ORA
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ORA

        case &H06  ' ASL
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ASL

        case &H07  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H08  ' PHP
        additional_cycle1 = addr_IMP
        additional_cycle2 = PHP

        case &H09  ' ORA
        additional_cycle1 = addr_IMM
        additional_cycle2 = ORA

        case &H0A  ' ASL
        additional_cycle1 = addr_IMP
        additional_cycle2 = ASL

        case &H0B   '???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H0C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H0D  ' ORA
        additional_cycle1 = add_ABS
        additional_cycle2 = ORA

        case &H0E ' ASL
        additional_cycle1 =  add_ABS
        additional_cycle2 = ASL

        case &H0F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H10: ' BPL
        additional_cycle1 = add_REL
        additional_cycle2 = BPL

        case &H11  ' ORA
        additional_cycle1 = add_IZY
        additional_cycle2 = ORA

        case &H12  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H13  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H14  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H15  ' ORA
        additional_cycle1 = add_ZPX
        additional_cycle2 = ORA

        case &H16  ' ASL
        additional_cycle1 = add_ZPX
        additional_cycle2 = ASL

        case &H17  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H18  ' CLC
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLC

        case &H19  ' ORA
        additional_cycle1 = addr_IMM
        additional_cycle2 = ORA

        case &H1A  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H1B   '???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H1C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H1D  ' ORA
        additional_cycle1 = add_ABX
        additional_cycle2 = ORA

        case &H1E ' ASL
        additional_cycle1 =  add_ABX
        additional_cycle2 = ASL

        case &H1F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H20: ' JSR
        additional_cycle1 = add_ABS
        additional_cycle2 = JSR

        case &H21  ' AND
        additional_cycle1 = add_IZX
        additional_cycle2 = aAND

        case &H22  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H23  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H24  ' BIT
        additional_cycle1 = addr_ZPO
        additional_cycle2 = BIT

        case &H25  ' AND
        additional_cycle1 = addr_ZPO
        additional_cycle2 = aAND

        case &H26  ' ROL
        additional_cycle1 = addr_ZPO
        additional_cycle2 = XXX

        case &H27  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H28  ' PLP
        additional_cycle1 = addr_IMP
        additional_cycle2 = PLP

        case &H29  ' AND
        additional_cycle1 = addr_IMM
        additional_cycle2 = aAND

        case &H2A  ' ROL
        additional_cycle1 = addr_IMP
        additional_cycle2 = ROL

        case &H2B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H2C  ' BIT
        additional_cycle1 = add_ABS
        additional_cycle2 = BIT

        case &H2D  ' AND
        additional_cycle1 = add_ABS
        additional_cycle2 = aAND

        case &H2E ' ROL
        additional_cycle1 =  add_ABS
        additional_cycle2 = ASL

        case &H2F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H30: ' BMI
        additional_cycle1 = add_REL
        additional_cycle2 = BMI

        case &H31  ' AND
        additional_cycle1 = add_IZY
        additional_cycle2 = aAND

        case &H32  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H33  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H34  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H35  ' AND
        additional_cycle1 = add_ZPX
        additional_cycle2 = aAND

        case &H36  ' ROL
        additional_cycle1 = add_ZPX
        additional_cycle2 = XXX

        case &H37  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H38  ' SEC
        additional_cycle1 = addr_IMP
        additional_cycle2 =SEC

        case &H39  ' AND
        additional_cycle1 = add_ABY
        additional_cycle2 = aAND

        case &H3A  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H3B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H3C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H3D  ' AND
        additional_cycle1 = add_ABX
        additional_cycle2 = aAND

        case &H3E ' ROL
        additional_cycle1 =  add_ABX
        additional_cycle2 = ASL

        case &H3F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H40: ' RTI
        additional_cycle1 = addr_IMP
        additional_cycle2 = RTI

        case &H41  ' EOR
        additional_cycle1 = add_IZX
        additional_cycle2 = EOR

        case &H42  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H43  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H44  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H45  ' EOR
        additional_cycle1 = addr_ZPO
        additional_cycle2 = EOR

        case &H46  ' LSR
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LSR

        case &H47  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H48  ' PHA
        additional_cycle1 = addr_IMP
        additional_cycle2 = PHA

        case &H49  ' EOR
        additional_cycle1 = addr_IMM
        additional_cycle2 = EOR

        case &H4A  ' LSR
        additional_cycle1 = addr_IMP
        additional_cycle2 = LSR

        case &H4B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H4C  ' JMP
        additional_cycle1 = add_ABS
        additional_cycle2 = JMP

        case &H4D  ' EOR
        additional_cycle1 = add_ABS
        additional_cycle2 = EOR

        case &H4E ' LSR
        additional_cycle1 =  add_ABS
        additional_cycle2 = LSR

        case &H4F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H43  ' ???
        additional_cycle1 = addr_ZPO
        additional_cycle2 = XXX

        case &H44  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H45  ' EOR
        additional_cycle1 = addr_ZPO
        additional_cycle2 = EOR

        case &H46  ' LSR
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LSR

        case &H47  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H48  ' PHA
        additional_cycle1 = addr_IMP
        additional_cycle2 = PHA

        case &H49  ' EOR
        additional_cycle1 = addr_IMM
        additional_cycle2 = EOR

        case &H4A  ' LSR
        additional_cycle1 = addr_IMP
        additional_cycle2 = LSR

        case &H4B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H4C  ' JMP
        additional_cycle1 = add_ABS
        additional_cycle2 = JMP

        case &H4D  ' EOR
        additional_cycle1 = add_ABS
        additional_cycle2 = EOR

        case &H4E ' LSR
        additional_cycle1 =  add_ABS
        additional_cycle2 = LSR

        case &H4F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H50: ' BVC
        additional_cycle1 = add_REL
        additional_cycle2 = BVC

        case &H51  ' EOR
        additional_cycle1 = add_IZY
        additional_cycle2 = EOR

        case &H52  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H53  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H54  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H55  ' EOR
        additional_cycle1 = add_ZPX
        additional_cycle2 = EOR

        case &H56  ' LSR
        additional_cycle1 = add_ZPX
        additional_cycle2 = LSR

        case &H57  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H58  ' CLI
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLI

        case &H59  ' EOR
        additional_cycle1 = add_ABY
        additional_cycle2 = EOR

        case &H5A  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H5B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H5C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H5D  ' EOR
        additional_cycle1 = add_ABX
        additional_cycle2 = EOR

        case &H5E ' LSR
        additional_cycle1 =  add_ABX
        additional_cycle2 = LSR

        case &H5F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H60: ' RTS
        additional_cycle1 = addr_IMP
        additional_cycle2 = RTS

        case &H61  ' ADC
        additional_cycle1 = add_IZX
        additional_cycle2 = ADC

        case &H62  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H63  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H64  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H65  ' ADC
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ADC

        case &H66  ' ROR
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ROR

        case &H67  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H68  ' PLA
        additional_cycle1 = addr_IMP
        additional_cycle2 = PLA

        case &H69  ' ADC
        additional_cycle1 = addr_IMM
        additional_cycle2 = ADC

        case &H6A  ' ROR
        additional_cycle1 = addr_IMP
        additional_cycle2 = ROR

        case &H6B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H6C  ' JMP
        additional_cycle1 = add_IND
        additional_cycle2 = JMP

        case &H6D  ' ADC
        additional_cycle1 = add_ABS
        additional_cycle2 = ADC

        case &H6E ' ROR
        additional_cycle1 =  add_ABS
        additional_cycle2 = ROR

        case &H6F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H70: ' BVS
        additional_cycle1 = add_REL
        additional_cycle2 =  BVS

        case &H71  ' ADC
        additional_cycle1 = add_IZY
        additional_cycle2 = ADC

        case &H72  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H73  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H74  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H75  ' ADC
        additional_cycle1 = add_ZPX
        additional_cycle2 = ADC

        case &H76  ' ROR
        additional_cycle1 = add_ZPX
        additional_cycle2 = ROR

        case &H77  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H78  ' SEI
        additional_cycle1 = addr_IMP
        additional_cycle2 = SEI

        case &H79  ' ADC
        additional_cycle1 = add_ABY
        additional_cycle2 = ADC

        case &H7A  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H7B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H7C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H7D  ' ADC
        additional_cycle1 = add_ABX
        additional_cycle2 = ADC

        case &H7E ' ROR
        additional_cycle1 =  add_ABX
        additional_cycle2 = ROR

        case &H7F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H80: ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 =  XXX

        case &H81  ' STA
        additional_cycle1 = add_IZX
        additional_cycle2 = STA

        case &H82  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H83  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H84  ' STY
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STY

        case &H85  ' STA
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STA

        case &H86  ' STX
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STX

        case &H87  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H88  ' DEY
        additional_cycle1 = addr_IMP
        additional_cycle2 = DEY

        case &H89  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H8A  ' TXA
        additional_cycle1 = addr_IMP
        additional_cycle2 = TXA

        case &H8B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H8C  'STY
        additional_cycle1 = add_ABS
        additional_cycle2 = STY

        case &H8D  ' STA
        additional_cycle1 = add_ABS
        additional_cycle2 = STA

        case &H8E ' STX
        additional_cycle1 =  add_ABS
        additional_cycle2 = STX

        case &H8F   ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX






        case &H90: ' BCC
        additional_cycle1 = add_REL
        additional_cycle2 =  BCC

        case &H91  ' STA
        additional_cycle1 = add_IZY
        additional_cycle2 = STA

        case &H92  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H93  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H94  ' STY
        additional_cycle1 = add_ZPX
        additional_cycle2 = STY

        case &H95  ' STA
        additional_cycle1 = add_ZPX
        additional_cycle2 = STA

        case &H96  ' STX
        additional_cycle1 = add_ZPY
        additional_cycle2 = STX

        case &H97  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H98  ' TYA
        additional_cycle1 = addr_IMP
        additional_cycle2 = TYA

        case &H99  ' STA
        additional_cycle1 = add_ABY
        additional_cycle2 = STA

        case &H9A  ' TXS
        additional_cycle1 = addr_IMP
        additional_cycle2 = TXS

        case &H9B  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H9C  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H9D  ' STA
        additional_cycle1 = add_ABX
        additional_cycle2 = STA

        case &H9E  ' ???
        additional_cycle1 =  addr_IMP
        additional_cycle2 = XXX

        case &H9F  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &HA0: ' LDY
        additional_cycle1 = addr_IMM
        additional_cycle2 =  LDY

        case &HA1  'LDA
        additional_cycle1 = add_IZX
        additional_cycle2 = LDA

        case &HA2  ' LDX
        additional_cycle1 = addr_IMM
        additional_cycle2 = LDX

        case &HA3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HA4  ' LDY
        additional_cycle1 = add_ZPX
        additional_cycle2 = LDY

        case &HA5  ' LDA
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LDA

        case &HA6  ' LDX
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LDX

        case &HA7  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HA8  ' TAY
        additional_cycle1 = addr_IMP
        additional_cycle2 = TAY

        case &HA9  ' LDA
        additional_cycle1 = addr_IMM
        additional_cycle2 = LDA

        case &HAA  ' TAX
        additional_cycle1 = addr_IMP
        additional_cycle2 = TAX

        case &HAB  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HAC  ' LDY
        additional_cycle1 = add_ABS
        additional_cycle2 = LDY

        case &HAD  ' LDA
        additional_cycle1 = add_ABS
        additional_cycle2 = LDA

        case &HAE  ' LDX
        additional_cycle1 =  add_ABS
        additional_cycle2 = LDX

        case &HAF  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HB0: ' BCS
        additional_cycle1 = add_REL
        additional_cycle2 =  LDY

        case &HB1  'LDA
        additional_cycle1 = add_IZY
        additional_cycle2 = LDA

        case &HB2  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB4  ' LDY
        additional_cycle1 = add_ZPX
        additional_cycle2 = LDY

        case &HB5  ' LDA
        additional_cycle1 = add_ZPX
        additional_cycle2 = LDA

        case &HB6  ' LDX
        additional_cycle1 = add_ZPY
        additional_cycle2 = LDX

        case &HB7  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB8  'CLV
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLV

        case &HB9  ' LDA
        additional_cycle1 = add_ABY
        additional_cycle2 = LDA

        case &HBA  ' TSX
        additional_cycle1 = addr_IMP
        additional_cycle2 = TSX

        case &HBB  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HBC  ' LDY
        additional_cycle1 = add_ABX
        additional_cycle2 = LDY

        case &HBD  ' LDA
        additional_cycle1 = add_ABX
        additional_cycle2 = LDA

        case &HBE  ' LDX
        additional_cycle1 =  add_ABY
        additional_cycle2 = LDX

        case &HBF  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HC0: ' CPY
        additional_cycle1 = addr_IMM
        additional_cycle2 =  CPY

        case &HC1  'CMP
        additional_cycle1 = add_IZX
        additional_cycle2 = CMP

        case &HC2  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HC3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HC4  ' CPY
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CPY

        case &HC5  ' CMP
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CMP

        case &HC6  ' DEC
        additional_cycle1 = addr_ZPO
        additional_cycle2 = DEC

        case &HC7  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HC8  'INY
        additional_cycle1 = addr_IMP
        additional_cycle2 = INY

        case &HC9  ' CMP
        additional_cycle1 = addr_IMM
        additional_cycle2 = CMP

        case &HCA  ' DEX
        additional_cycle1 = addr_IMP
        additional_cycle2 = DEX

        case &HCB  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HCC  ' CPY
        additional_cycle1 = add_ABS
        additional_cycle2 = CPY

        case &HCD  ' LDA
        additional_cycle1 = add_ABX
        additional_cycle2 = LDA

        case &HCE  ' LDX
        additional_cycle1 =  add_ABY
        additional_cycle2 = LDX

        case &HCF  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX


        case &HD0: ' BNE
        additional_cycle1 = add_REL
        additional_cycle2 =  BNE

        case &HD1  'CMP
        additional_cycle1 = add_IZY
        additional_cycle2 = CMP

        case &HD2  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD4  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HD5  ' CMP
        additional_cycle1 = add_ZPX
        additional_cycle2 = CMP

        case &HD6  ' DEC
        additional_cycle1 = add_ZPX
        additional_cycle2 = DEC

        case &HD7  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD8  'CLD
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLD

        case &HD9  ' CMP
        additional_cycle1 = add_ABY
        additional_cycle2 = CMP

        case &HDA  ' NOP
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HDB  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HDC  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HDD  ' CMP
        additional_cycle1 = add_ABX
        additional_cycle2 =CMP

        case &HDE  ' DEC
        additional_cycle1 =  add_ABX
        additional_cycle2 = DEC

        case &HDF  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HE0: ' CPX
        additional_cycle1 = addr_IMM
        additional_cycle2 =  CPX

        case &HE1  'SBC
        additional_cycle1 = add_IZX
        additional_cycle2 = SBC

        case &HE2  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HE3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE4  ' CPX
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CPX

        case &HE5  ' SBC
        additional_cycle1 = addr_ZPO
        additional_cycle2 = SBC

        case &HE6  ' INC
        additional_cycle1 = addr_ZPO
        additional_cycle2 = INC

        case &HE7  '???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE8  ' INX
        additional_cycle1 = addr_IMP
        additional_cycle2 = INX

        case &HE9  ' SBC
        additional_cycle1 = addr_IMM
        additional_cycle2 = SBC

        case &HEA ' NOP
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HEB  ' CPX
        additional_cycle1 = add_ABS
        additional_cycle2 = CPX

        case &HEC  ' SBC
        additional_cycle1 = add_ABS
        additional_cycle2 = SBC

        case &HED  ' INC
        additional_cycle1 =  add_ABS
        additional_cycle2 = INC

        case &HEE  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HF0: ' BEQ
        additional_cycle1 = add_REL
        additional_cycle2 =  BEQ

        case &HE1  'SBC
        additional_cycle1 = add_IZY
        additional_cycle2 = SBC

        case &HE2  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE3  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE4  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HE5  ' SBC
        additional_cycle1 = add_ZPX
        additional_cycle2 = SBC

        case &HE6  ' INC
        additional_cycle1 = add_ZPX
        additional_cycle2 = INC

        case &HE7  '???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE8  ' SED
        additional_cycle1 = addr_IMP
        additional_cycle2 = SED

        case &HE9  'SBC
        additional_cycle1 = add_ABY
        additional_cycle2 = SBC

        case &HEA ' NOP
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HEB  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HEC  ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HED  ' SBC
        additional_cycle1 =  add_ABX
        additional_cycle2 = SBC

        case &HEE  ' INC
        additional_cycle1 = add_ABX
        additional_cycle2 = INC

        case &HEF ' ???
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX


        end select

 end function




