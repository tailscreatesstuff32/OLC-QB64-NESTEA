
SUB disassemble (maparray() AS STRING, nStart AS _UNSIGNED INTEGER, nStop AS _UNSIGNED INTEGER)
    DIM addr AS _UNSIGNED LONG
    DIM value AS _UNSIGNED _BYTE
    DIM value_sgn AS _BYTE
    DIM lo AS _UNSIGNED _BYTE
    DIM hi AS _UNSIGNED _BYTE
    DIM op AS _UNSIGNED _BYTE

    DIM line_addr AS _UNSIGNED INTEGER
    DIM sInst AS STRING

    addr = nStart
    WHILE addr <= nStop

        line_addr = addr

        sInst = "$" + hex_range(addr, 4) + ": "
        op = bus_cpuRead(addr, 1)

        addr = addr + 1



        sInst = sInst + instructions(op).op_name + " "
        IF instructions(op).addrmode = addr_mode_IMP THEN
            sInst = sInst + " {IMP}"
        ELSEIF instructions(op).addrmode = add_mode_IMM THEN
            value = bus_cpuRead(addr, 1)
            addr = addr + 1
            sInst = sInst + "#$" + hex_range(value, 2) + " {IMM}"
        ELSEIF instructions(op).addrmode = add_mode_ABS THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = bus_cpuRead(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + " {ABS}"
        ELSEIF instructions(op).addrmode = add_mode_ZPO THEN

            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + " {ZPO}"
        ELSEIF instructions(op).addrmode = addr_mode_ZPX THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + ", X {ZPX}"
        ELSEIF instructions(op).addrmode = add_mode_ZPY THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "$" + hex_range(lo, 2) + ", Y {ZPY}"
        ELSEIF instructions(op).addrmode = add_mode_IZX THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "($" + hex_range(lo, 2) + ", X) {IZX}"
        ELSEIF instructions(op).addrmode = addr_mode_IZY THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = &H00
            sInst = sInst + "($" + hex_range(lo, 2) + ", Y) {IZY}"
        ELSEIF instructions(op).addrmode = add_mode_ABX THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = bus_cpuRead(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + ", X {ABX}"
        ELSEIF instructions(op).addrmode = add_mode_ABY THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = bus_cpuRead(addr, 1)
            addr = addr + 1
            sInst = sInst + "$" + hex_range(_SHL(hi, 8) OR lo, 4) + ", Y {ABY}"
        ELSEIF instructions(op).addrmode = addr_mode_IND THEN
            lo = bus_cpuRead(addr, 1)
            addr = addr + 1
            hi = bus_cpuRead(addr, 1)
            addr = addr + 1
            sInst = sInst + "($" + hex_range(_SHL(hi, 8) OR lo, 4) + ") {IND}"
        ELSEIF instructions(op).addrmode = add_mode_REL THEN
            value = bus_cpuRead(addr, 1)
            value_sgn = value
            addr = addr + 1
            sInst = sInst + "$" + hex_range(value, 2) + " [$" + hex_range(addr + value_sgn, 4) + "] {REL}"


        END IF

        maparray(line_addr) = sInst

    WEND
    '  _TITLE STR$(bus_cpuRead(&HC001~%, 1) )
    maparray(65536) = " "


END SUB



SUB episode3_UI ()



    'LINE (0, 0)-(256 * scale, 240 * scale), _RGB(0, 0, 0), BF

    CLS , _RGBA(0, 0, 128, 255)


    ' _SETALPHA 150, , nestea_logo
    '_SETALPHA 255, , nestea_logo
    '_CLEARCOLOR _RGB32(0, 0, 0, 0), nestea_logo
    'LINE (0, 0)-(256 * 2, 240 * 2), _RGBA(0, 0, 0, 255), BF
    '   _dest nes_scrn
    _PUTIMAGE (0, 0)-(256 * 2, 240 * 2), nes_scrn, canvas

    ' _PUTIMAGE (0, 0)-(500, 500), nestea_logo, canvas
    'DrawRAM 2, 2, &H0300, 16, 16
    'DrawRAM 2, 182, &H85D0, 16, 16

    DrawRAM 2, 2, &H0000, 16, 16
    DrawRAM 2, 182, &H8000~%, 16, 16




    'DrawAudio
    DrawCPUepisode2 516, 2
    DrawCodeepisode2 516, 72, 26



    'Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)

    'LINE (0, 0)-(256 * 2, 240 * 2), _RGB(0, 0, 0), BF

    CONST nSwatchSize = 6
    FOR p = 0 TO 7
        FOR s = 0 TO 3
            rect_x = 516 + p * (6 * 5) + s * 6
            rect_y = 340

            '  LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), GetColourFromPaletteRam(p,s), BF
            fillrect (516 + p * (nSwatchSize * 5) + s * nSwatchSize), 340, nSwatchSize - 1, nSwatchSize - 1, GetColourFromPaletteRam(p, s)
        NEXT s
    NEXT p
    ' LINE (516 + nSelectedPalette *(nSwatchSize * 5) - 1,339)-((516 + nSelectedPalette *(nSwatchSize * 5) - 1)+( nSwatchSize * 4),  339+nSwatchSize), _RGBA(255,255,255,255), B
    ''DrawRect(516 + nSelectedPalette * (nSwatchSize * 5) - 1, 339, (nSwatchSize * 4), nSwatchSize, olc::WHITE);

    drawrect 516 + nselectedpalette * (nSwatchSize * 5) - 1, 339, nSwatchSize * 4, nSwatchSize, _RGBA(255, 255, 255, 255)

    'LINE (516, 348)-(516 + 127, 348 + 127),GetPatternTable(0, nSelectedPalette) , BF
    'LINE (648, 348)-(648 + 127, 348 + 127), GetPatternTable(1, nSelectedPalette), BF

    '_putimage (516, 348)-(516 + 127, 348 + 127),GetPatternTable(0, nSelectedPalette),canvas
    '  _putimage (648, 348)-(648 + 127, 348 + 127) , GetPatternTable(1, nSelectedPalette),canvas
END SUB


SUB DrawCodeepisode2 (x AS INTEGER, y AS INTEGER, nLines AS INTEGER)

    DIM pc AS _UNSIGNED LONG

    pc = cpu_regs.pc


    nLineY = _SHR(nLines, 1) * 10 + y

    IF LEN(mapAsm(pc)) <> 0 THEN

        Drawstring x, nLineY, mapAsm(pc), _RGB(0, 255, 255)

        'bottom
        WHILE nLineY < (nLines * 10) + y

            pc = pc + 1
            IF pc >= UBOUND(mapasm) THEN
                pc = LBOUND(mapasm)
            END IF

            IF pc <= LBOUND(mapasm) THEN
                pc = UBOUND(mapasm)
            END IF


            IF LEN(mapAsm((pc))) <> 0 THEN
                nLineY = nLineY + 10

                Drawstring x, nLineY, mapAsm(pc), _RGB(255, 255, 255)

            END IF
        WEND
    END IF

    'top
    pc = cpu_regs.pc

    nLineY = _SHR(nLines, 1) * 10 + y

    IF LEN(mapAsm(pc)) <> 0 THEN
        WHILE nLineY > y
            pc = pc - 1

            IF pc >= UBOUND(mapasm) THEN
                pc = LBOUND(mapasm)
            END IF

            IF pc <= LBOUND(mapasm) THEN
                pc = UBOUND(mapasm)
            END IF


            IF LEN(mapAsm(pc)) <> 0 THEN
                nLineY = nLineY - 10

                Drawstring x, nLineY, mapAsm(pc), _RGB(255, 255, 255)

            END IF



        WEND

    END IF

END SUB


SUB DrawCPUepisode2 (x AS INTEGER, y AS INTEGER)


    Drawstring x, y, "STATUS: ", _RGB(255, 255, 255)
    IF cpu_regs.status AND cpu_regs.flags.N THEN Drawstring x + 64, y, "N", _RGB(0, 255, 0) ELSE Drawstring x + 64, y, "N", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.V THEN Drawstring x + 80, y, "V", _RGB(0, 255, 0) ELSE Drawstring x + 80, y, "V", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.U THEN Drawstring x + 96, y, "-", _RGB(0, 255, 0) ELSE Drawstring x + 96, y, "-", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.B THEN Drawstring x + 112, y, "B", _RGB(0, 255, 0) ELSE Drawstring x + 112, y, "B", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.D THEN Drawstring x + 128, y, "D", _RGB(0, 255, 0) ELSE Drawstring x + 128, y, "D", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.I THEN Drawstring x + 144, y, "I", _RGB(0, 255, 0) ELSE Drawstring x + 144, y, "I", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.Z THEN Drawstring x + 160, y, "Z", _RGB(0, 255, 0) ELSE Drawstring x + 160, y, "Z", _RGB(255, 0, 0)
    IF cpu_regs.status AND cpu_regs.flags.C THEN Drawstring x + 178, y, "C", _RGB(0, 255, 0) ELSE Drawstring x + 178, y, "C", _RGB(255, 0, 0)



    ' Drawstring x + 64, y, "N", _RGB(255, 0, 0)
    ' Drawstring x + 80, y, "V", _RGB(255, 0, 0)
    '  Drawstring x + 96, y, "-", _RGB(0, 255, 0)
    'Drawstring x + 112, y, "B", _RGB(255, 0, 0)
    'Drawstring x + 128, y, "D", _RGB(255, 0, 0)
    'Drawstring x + 144, y, "I", _RGB(255, 0, 0)
    'Drawstring x + 160, y, "Z", _RGB(255, 0, 0)
    'Drawstring x + 178, y, "C", _RGB(255, 0, 0)

    Drawstring x, y + 10, "PC: $" + hex_range(cpu_regs.pc,4), _RGB(255, 255, 255)
    Drawstring x, y + 20, "A: $" + hex_range(cpu_regs.a_reg,2)+  "  ["+ LTRIM$(STR$(cpu_regs.a_reg)) +"]", _RGB(255, 255, 255)
    Drawstring x, y + 30, "X: $"+ hex_range(cpu_regs.x_reg,2)+"  ["+ LTRIM$(STR$(cpu_regs.x_reg)) +"]", _RGB(255, 255, 255)
    Drawstring x, y + 40, "Y: $"+ hex_range(cpu_regs.y_reg,2)+ "  ["+LTRIM$(STR$(cpu_regs.y_reg)) +"]", _RGB(255, 255, 255)
    Drawstring x, y + 50, "Stack P: $" +hex_range(cpu_regs.stkp,4), _RGB(255, 255, 255)
END SUB

SUB DrawRAMepisode2 (x AS INTEGER, y AS INTEGER, addr AS _UNSIGNED INTEGER, nRows AS INTEGER, nCols AS INTEGER)
    DIM nRamx, nRamy
    nRamx = x
    nRamy = y

    FOR row = 0 TO nRows - 1
        sOffset$ = "$" + hex_str$(addr, 4) + ":"
        FOR col = 0 TO nCols - 1


            sOffset$ = sOffset$ + " " + "00" ' hex_str$(&H00, 4)


        NEXT col

        Drawstring nRamx, nRamy, sOffset$, _RGB(255, 255, 255)

        nRamy = nRamy + 10


    NEXT row

end sub

FUNCTION keypress (k AS _BYTE)

    IF _KEYDOWN(k) THEN
        IF keys(k) = 0 THEN
            keys(k) = 1
            keypress = keys(k)


        END IF
    ELSE
        keys(k) = 0
        keypress = keys(k)


    END IF

END FUNCTION

FUNCTION keyheld (k AS _BYTE)

    keyheld = _KEYDOWN(k)

END FUNCTION












SUB DrawCPU (x AS INTEGER, y AS INTEGER)


    Drawstring x, y, "STATUS: ", _RGB(255, 255, 255)
    Drawstring x + 64, y, "N", _RGB(255, 0, 0)
    Drawstring x + 80, y, "V", _RGB(255, 0, 0)
    Drawstring x + 96, y, "-", _RGB(0, 255, 0)
    Drawstring x + 112, y, "B", _RGB(255, 0, 0)
    Drawstring x + 128, y, "D", _RGB(255, 0, 0)
    Drawstring x + 144, y, "I", _RGB(255, 0, 0)
    Drawstring x + 160, y, "Z", _RGB(255, 0, 0)
    Drawstring x + 178, y, "C", _RGB(255, 0, 0)

    Drawstring x, y + 10, "PC: $" + "0000", _RGB(255, 255, 255)
    Drawstring x, y + 20, "A: $" + "00" + "  [0]", _RGB(255, 255, 255)
    Drawstring x, y + 30, "X: $" + "00" + "  [0]", _RGB(255, 255, 255)
    Drawstring x, y + 40, "Y: $" + "00" + "  [0]", _RGB(255, 255, 255)
    Drawstring x, y + 50, "Stack P: $" + "0000", _RGB(255, 255, 255)
END SUB

SUB DrawRAM (x AS INTEGER, y AS INTEGER, addr AS _UNSIGNED INTEGER, nRows AS INTEGER, nCols AS INTEGER)
    DIM as integer   nRamx, nRamy
    nRamx = x
    nRamy = y

    FOR row = 0 TO nRows - 1
        sOffset$ = "$" + hex_range(addr, 4) + ":"
        FOR col = 0 TO nCols - 1


            sOffset$ = sOffset$ + " " + hex_range(bus_cpuRead(addr,1),2)

              addr = addr + 1
        NEXT col

        Drawstring nRamx, nRamy, sOffset$, _RGB(255, 255, 255)

        nRamy = nRamy + 10


    NEXT row



END SUB





SUB Drawstring (x AS INTEGER, y AS INTEGER, str1 AS STRING, clr AS _UNSIGNED LONG)


    ' LOCATE x, y
    COLOR clr, _RGBA(0, 0, 0, 0)
    _PRINTSTRING (x, y), str1, canvas&




END SUB


FUNCTION hex_str$ (n AS INTEGER, d AS INTEGER)
    s$ = "0000"

    hex_str$ = s$

END FUNCTION

SUB DrawCode (x AS INTEGER, y AS INTEGER, nLines AS INTEGER)

    FOR col = 0 TO nLines

        Drawstring x, y + col * 10, "00" + ": (" + "0" + "," + "0" + ") " + "ID: " + "00" + " AT: " + "00", _RGB(255, 255, 255)

    NEXT col


END SUB


FUNCTION Rand (Bottom, Top)

    'create a random number between Bottom and Top, inclusive
    ' RANDOMIZE TIMER 'this sets the random number generator
    ' RANDOMIZE RND * 10 'this confuses it to get more randomness
    IF Bottom > Top THEN 'oops - reverse order
        Temp = Bottom
        Bottom = Top
        Top = Temp
    END IF
    Rand = INT((Top - Bottom + 1) * RND + Bottom)
END FUNCTION



SUB episode2_UI ()



    'LINE (0, 0)-(256 * scale, 240 * scale), _RGB(0, 0, 0), BF
    CLS , _RGB(0, 0, 128)


    ' _SETALPHA 150, , nestea_logo
    '_SETALPHA 255, , nestea_logo
    '_CLEARCOLOR _RGB32(0, 0, 0, 0), nestea_logo
    _PUTIMAGE (0, -99)-(500, 500 - 99), nestea_logo


    DrawRAM 2, 2, &H0000, 16, 16
    DrawRAM 2, 182, &H8000, 16, 16
    'DrawAudio
    DrawCPU 516, 2
    DrawCode 516, 72, 25



    Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)

    ' LINE (0, 0)-(256 * 2, 240 * 2), _RGB(0, 0, 0), BF


    'FOR p = 0 TO 7
    '    FOR s = 0 TO 3
    '        rect_x = 516 + p * (6 * 5) + s * 6
    '        rect_y = 340

    '        LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), _RGB(0, 0, 0), BF

    '    NEXT s
    'NEXT p


END SUB


'SUB episode3_UI ()

'    _DEST canvas



'    'LINE (0, 0)-(256 * scale, 240 * scale), _RGB(0, 0, 0), BF

'    CLS , _RGBA(0, 0, 128, 255)


'    ' _SETALPHA 150, , nestea_logo
'    '_SETALPHA 255, , nestea_logo
'    '_CLEARCOLOR _RGB32(0, 0, 0, 0), nestea_logo
'    'LINE (0, 0)-(256 * 2, 240 * 2), _RGBA(0, 0, 0, 255), BF
'    '   _dest nes_scrn



'    '_PUTIMAGE (0, 0)-(256 * 2, 240 * 2), nes_scrn, canvas

'    'PPU_clock

'    'test_code
'    _PUTIMAGE (0, 0)-(256 * 2, 240 * 2), nes_scrn, canvas
'    _DEST canvas

'    '  _PUTIMAGE (0, 0)-(500, 500), nestea_logo, canvas



'    '  DrawRAM 2, 2, &H0000, 16, 16
'    ' DrawRAM 2, 182, &H8000, 16, 16
'    'DrawAudio
'    DrawCPUepisode2 516, 2
'    DrawCodeepisode2 516, 72, 26



'    'Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)


'    'FOR p = 0 TO 7
'    '    FOR s = 0 TO 3
'    '        rect_x = 516 + p * (6 * 5) + s * 6
'    '        rect_y = 340

'    '        LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), _RGB(0, 0, 0), BF

'    '    NEXT s
'    'NEXT p


'END SUB

SUB episode4_UI ()



    'LINE (0, 0)-(256 * scale, 240 * scale), _RGB(0, 0, 0), BF
    CLS , _RGB(0, 0, 128)


    ' _SETALPHA 150, , nestea_logo
    '_SETALPHA 255, , nestea_logo
    '_CLEARCOLOR _RGB32(0, 0, 0, 0), nestea_logo
    _PUTIMAGE (0, -99)-(500, 500 - 99), nestea_logo


    DrawRAM 2, 2, &H01FF, 16, 16
    DrawRAM 2, 182, &H300, 16, 16
    'DrawAudio
    DrawCPU 516, 2
    DrawCode 516, 72, 25



    'Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)

    ' LINE (0, 0)-(256 * 2, 240 * 2), _RGB(0, 0, 0), BF


    'FOR p = 0 TO 7
    '    FOR s = 0 TO 3
    '        rect_x = 516 + p * (6 * 5) + s * 6
    '        rect_y = 340

    '        LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), _RGB(0, 0, 0), BF

    '    NEXT s
    'NEXT p


END SUB

SUB episode5_UI ()



    'LINE (0, 0)-(256 * scale, 240 * scale), _RGB(0, 0, 0), BF
    CLS , _RGB(0, 0, 128)


    ' _SETALPHA 150, , nestea_logo
    '_SETALPHA 255, , nestea_logo
    '_CLEARCOLOR _RGB32(0, 0, 0, 0), nestea_logo
    _PUTIMAGE (0, -99)-(500, 500 - 99), nestea_logo


    DrawRAM 2, 2, &H0000, 16, 16
    DrawRAM 2, 182, &H8000, 16, 16
    'DrawAudio
    DrawCPU 516, 2
    DrawCode 516, 72, 25



    'Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)

    ' LINE (0, 0)-(256 * 2, 240 * 2), _RGB(0, 0, 0), BF


    'FOR p = 0 TO 7
    '    FOR s = 0 TO 3
    '        rect_x = 516 + p * (6 * 5) + s * 6
    '        rect_y = 340

    '        LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), _RGB(0, 0, 0), BF

    '    NEXT s
    'NEXT p


END SUB

SUB episode6to7_UI ()


    CLS , _RGB(0, 0, 128)

    LINE (0, 0)-(256 * scale * 2, 240 * scale * 2), _RGB(0, 0, 0), BF

    ' _PUTIMAGE (0, 0)-(500, 500), nestea_logo


    'DrawRAM 2, 2, &H0000, 16, 16
    'DrawRAM 2, 182, &H8000, 16, 16
    'DrawAudio
    DrawCPU 516, 2
    DrawCode 516, 72, 25



    'Drawstring 10, 370, "SPACE = Step Instruction    R = RESET    I = IRQ    N = NMI", _RGB(255, 255, 255)

    ' LINE (0, 0)-(256 * 2, 240 * 2), _RGB(0, 0, 0), BF


    FOR p = 0 TO 7
        FOR s = 0 TO 3
            rect_x = 516 + p * (6 * 5) + s * 6
            rect_y = 340

            LINE (rect_x, rect_y)-((rect_x + 6) - 1, (rect_y + 6) - 1), _RGB(0, 0, 0), BF

        NEXT s
    NEXT p


    LINE (516, 348)-(516 + 127, 348 + 127), _RGB(0, 0, 0), BF
    LINE (648, 348)-(648 + 127, 348 + 127), _RGB(0, 0, 0), BF




END SUB


sub drawrect(x1 as integer,y1 as integer,x2 as integer,y2 as integer,col1  as _unsigned long)

         line(x1,y1)-(x1+x2,y1+y2),col1,B


end sub



sub fillrect(x1 as integer,y1 as integer,x2 as integer,y2 as integer,col1 as _unsigned long)

         line(x1,y1)-(x1+x2,y1+y2),col1,BF


end sub




