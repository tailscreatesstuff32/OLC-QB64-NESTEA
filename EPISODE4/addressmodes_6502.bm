
FUNCTION addr_IMP~%
    fetched = cpu_regs.a_reg

    addr_IMP~% = 0

END FUNCTION


FUNCTION addr_IMM~%

    addr_abs = cpu_regs.pc
    cpu_regs.pc = cpu_regs.pc + 1


    addr_IMM~% = 0

END FUNCTION

FUNCTION addr_ZPO~%

    addr_abs = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1

    addr_abs = addr_abs AND &H00FF~%
    addr_ZPO~% = 0

END FUNCTION

FUNCTION add_ZPX~%

    addr_abs = (read_from_bus(cpu_regs.pc) + cpu_regs.x_reg)
    cpu_regs.pc = cpu_regs.pc + 1
    addr_abs = addr_abs AND &H00FF~%
    add_ZPX~% = 0
END FUNCTION

FUNCTION add_ZPY~%

    addr_abs = (read_from_bus(cpu_regs.pc) + cpu_regs.y_reg)
    cpu_regs.pc = cpu_regs.pc + 1
    addr_abs = addr_abs AND &H00FF~%
    add_ZPY~% = 0
END FUNCTION

FUNCTION add_REL~%

    addr_rel = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1
    IF addr_rel AND &H80~% THEN
        addr_rel = addr_rel OR &HFF00~%

    END IF
    add_REL~% = 0
END FUNCTION

FUNCTION add_ABS~%
    DIM lo AS _UNSIGNED INTEGER
    DIM hi AS _UNSIGNED INTEGER




    lo = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1
    hi = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1

    addr_abs = _SHL(hi, 8) OR lo

    add_ABS~% = 0
END FUNCTION


FUNCTION add_ABX~%

    DIM lo AS _UNSIGNED INTEGER
    DIM hi AS _UNSIGNED INTEGER



    lo = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1
    hi = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1



    addr_abs = _SHL(hi, 8) OR lo
    addr_abs = addr_abs + cpu_regs.x_reg


    IF (addr_abs AND &HFF00~%) <> _SHL(hi, 8) THEN


        add_ABX~% = 1
        '  EXIT FUNCTION
    ELSE
        add_ABX~% = 0
    END IF

    'add_ABX~% = 0
END FUNCTION

FUNCTION add_ABY~%

    DIM lo AS _UNSIGNED INTEGER
    DIM hi AS _UNSIGNED INTEGER



    lo = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1
    hi = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1



    addr_abs = _SHL(hi, 8) OR lo
    addr_abs = addr_abs + cpu_regs.y_reg


    IF (addr_abs AND &HFF00~%) <> _SHL(hi, 8) THEN


        add_ABY~% = 1
    ELSE
        add_ABY~% = 0
    END IF

END FUNCTION



FUNCTION add_IND~%

    DIM ptr_lo AS _UNSIGNED INTEGER
    DIM ptr_hi AS _UNSIGNED INTEGER
    DIM ptr AS _UNSIGNED INTEGER
    ptr_lo = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1


    ptr_hi = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1

    ptr = _SHL(ptr_hi, 8) OR ptr_lo

    IF ptr_lo = &H00FF~% THEN '// Simulate page boundary hardware bug
        addr_abs = (_SHL(read_from_bus(ptr AND &HFF00~%), 8) OR read_from_bus(ptr + 0))

    ELSE '  // Behave normally
        addr_abs = (_SHL(read_from_bus(ptr + 1), 8) OR read_from_bus(ptr + 0))
    END IF

    '_TITLE STR$(ptr_lo)
    'BEEP
    add_IND~% = 0


END FUNCTION







'FUNCTION add_IND~%

'    DIM ptr_lo AS _UNSIGNED INTEGER
'    DIM ptr_hi AS _UNSIGNED INTEGER
'    DIM ptr AS _UNSIGNED INTEGER
'    ptr_lo = read_from_bus(cpu_regs.pc)
'    cpu_regs.pc = cpu_regs.pc + 1


'    ptr_hi = read_from_bus(cpu_regs.pc)
'    cpu_regs.pc = cpu_regs.pc + 1

'    ptr = _SHL(ptr_hi, 8) OR ptr_lo

'    addr_abs = read_from_bus(ptr_lo OR _SHL(ptr_hi, 8))
'    addr_abs = addr_abs OR _SHL(read_from_bus((ptr_lo + 1) AND &HFF) OR _SHL(ptr_hi, 8), 8)


'    'IF ptr_lo = &H00FF THEN '// Simulate page boundary hardware bug
'    '    addr_abs = (read_from_bus(_SHL(ptr AND &HFF00~%, 8) OR read_from_bus(ptr + 0)))
'    'ELSE '  // Behave normally
'    '    addr_abs = (read_from_bus(_SHL(ptr + 1, 8) OR read_from_bus(ptr + 0)))
'    'END IF

'    '_TITLE STR$(ptr_lo)
'    'BEEP
'    add_IND~% = 0


'END FUNCTION

FUNCTION add_IZX~%

    DIM lo AS _UNSIGNED INTEGER
    DIM hi AS _UNSIGNED INTEGER
    DIM t AS _UNSIGNED INTEGER

    t = read_from_bus(cpu_regs.pc)


    cpu_regs.pc = cpu_regs.pc + 1

    lo = read_from_bus((t + cpu_regs.x_reg) AND &H00FF~%)

    hi = read_from_bus((t + cpu_regs.x_reg + 1) AND &H00FF~%)


    addr_abs = _SHL(hi, 8) OR lo
    add_IZX~% = 0
END FUNCTION


FUNCTION add_IZY~%

    DIM lo AS _UNSIGNED INTEGER
    DIM hi AS _UNSIGNED INTEGER
    DIM t AS _UNSIGNED INTEGER

    t = read_from_bus(cpu_regs.pc)
    cpu_regs.pc = cpu_regs.pc + 1
    lo = read_from_bus(t AND &H00FF~%)

    hi = read_from_bus((t + 1) AND &H00FF~%)

    addr_abs = _SHL(hi, 8) OR lo
    addr_abs = addr_abs + cpu_regs.y_reg

    IF ((addr_abs AND &HFF00~%) <> _SHL(hi, 8)) THEN
        add_IZY~% = 1
    ELSE

        add_IZY~% = 0



    END IF


    'DIM radr AS _UNSIGNED INTEGER
    'DIM adr AS _UNSIGNED INTEGER


    '  adr = read_from_bus(cpu_regs.pc)




    'adr = this.mem.read(this.br[PC]++);
    '      radr = this.mem.read(adr) | (this.mem.read((adr + 1) & 0xff) << 8);
    '     (radr + this.r[Y]) & 0xffff;

    'cpu_regs.pc = cpu_regs.pc + 1

    'radr = read_from_bus(adr) OR _SHL(read_from_bus((adr + 1) AND &HFF), 8)

    'addr_abs = radr + cpu_regs.y_reg



END FUNCTION

