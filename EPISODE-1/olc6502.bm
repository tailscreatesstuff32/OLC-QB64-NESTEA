
SUB reset_6502 ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER




    addr_abs = &HFFFC
    lo = read_from_bus(addr_abs + 0)
    hi = read_from_bus(addr_abs + 1)

    cpu_regs.pc = _SHL(hi, 8) OR lo
    cpu_regs.a_reg = 0
    cpu_regs.x_reg = 0
    cpu_regs.stkp = &HFD

    cpu_regs.status = &H00 OR cpu_regs.flags.U

    addr_rel = &H0000
    addr_abs = &H0000
    fetched = &H00

    cycles = 8

END SUB


SUB cpu_Clock
    'SHARED opcode AS _UNSIGNED _BYTE
    'SHARED cpu_regs AS regs_6502
    'SHARED cycles AS _UNSIGNED _BYTE


    DIM additional_cycle1 AS _UNSIGNED _BYTE
    DIM additional_cycle2 AS _UNSIGNED _BYTE

    IF cycles = 0 THEN


        opcode = read_from_bus(cpu_regs.pc)
        set_flag cpu_regs.flags.U, 1



        cpu_regs.pc = cpu_regs.pc + 1
        cycles = instructions(opcode).cycles

         execute_instruction additional_cycle1,additional_cycle2,opcode


        cycles = cycles + (additional_cycle1 AND additional_cycle2)
          '_title str$(addr_abs)


         set_flag cpu_regs.flags.U,1



    END IF

    'clock_cycles = TIMER

    cycles = cycles - 1
END SUB




FUNCTION complete        'tested-WORKS FINE
    'SHARED cycles AS _UNSIGNED _BYTE

    complete = cycles = 0

END FUNCTION



SUB set_flag (f AS _UNSIGNED _BYTE, b AS _UNSIGNED _BYTE)
    'SHARED cpu_regs AS regs_6502
    IF b THEN
        cpu_regs.status = cpu_regs.status OR f
    ELSE
        cpu_regs.status = cpu_regs.status AND NOT f


    END IF


END SUB



FUNCTION get_flag (f AS _UNSIGNED _BYTE)
    'SHARED cpu_regs AS regs_6502

    IF cpu_regs.status AND f THEN
        get_flag = 1
    ELSE
        get_flag = 0
    END IF

END FUNCTION

'----------------------------------------------  'tested-WORKS FINE
SUB fetch
    'SHARED opcode AS _UNSIGNED _BYTE
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE

    'not finshed  WIP
    IF NOT instructions(opcode).addrmode = addr_mode_IMP THEN
        fetched = read_from_bus(addr_abs)
    END IF


END SUB
''----------------------------------------------


SUB irq ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER



    DIM hi AS _UNSIGNED INTEGER
    DIM lo AS _UNSIGNED INTEGER

    IF get_flag(cpu_regs.flags.I) = 0 THEN


        write_to_bus &H0100 + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF
        cpu_regs.stkp = cpu_regs.stkp - 1
        write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.pc AND &H00FF
        cpu_regs.stkp = cpu_regs.stkp - 1
        set_flag cpu_regs.flags.B, 0
        set_flag cpu_regs.flags.U, 1
        set_flag cpu_regs.flags.I, 1
        write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.status
        cpu_regs.stkp = cpu_regs.stkp - 1
        addr_abs = &HFFFE
        lo = read_from_bus(addr_abs + 0)
        hi = read_from_bus(addr_abs + 1)
        cpu_regs.pc = _SHL(hi, 8) OR lo


        cycles = 7
    END IF


END SUB


SUB nmi ()
    'SHARED cpu_regs AS regs_6502
    'SHARED addr_abs AS _UNSIGNED INTEGER
    'SHARED addr_rel AS _UNSIGNED INTEGER
    'SHARED fetched AS _UNSIGNED _BYTE
    'SHARED cycles AS _UNSIGNED _BYTE
    'SHARED hi AS _UNSIGNED INTEGER
    'SHARED lo AS _UNSIGNED INTEGER



    write_to_bus &H0100 + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF
    cpu_regs.stkp = cpu_regs.stkp - 1
    write_to_bus &H0100 + cpu_regs.stkp, cpu_regs.pc AND &H00FF
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 0
    set_flag cpu_regs.flags.U, 1
    set_flag cpu_regs.flags.I, 1
    cpu_regs.stkp = cpu_regs.stkp - 1
    addr_abs = &HFFFA
    lo = read_from_bus(addr_abs + 0)
    hi = read_from_bus(addr_abs + 1)
    cpu_regs.pc = _SHL(hi, 8) OR lo


    cycles = 8

END SUB


FUNCTION hex_range$ (num1 AS _UNSIGNED LONG, num2 AS _UNSIGNED _BYTE)
       dim   num AS _UNSIGNED LONG
    s$ = STRING$(num2, "0")
     num = num1
    FOR i& = num2 - 1 TO 0 STEP -1
        'WHILE i& >= 0
        MID$(s$, i& + 1, 1) = MID$("0123456789ABCDEF", (num AND 15) + 1, 1)

        num = _SHR(num, 4)


    NEXT i&
    hex_range$ = s$

END FUNCTION
FUNCTION read_from_bus (addr AS _UNSIGNED INTEGER)

    read_from_bus = bus_read(addr, 0)

END FUNCTION



SUB write_to_bus (addr AS _UNSIGNED INTEGER, d AS _UNSIGNED _BYTE)

    bus_write addr, d

END SUB

FUNCTION Bin_range$ (num1 AS _UNSIGNED LONG, num2 AS _UNSIGNED _BYTE)
    s$ = STRING$(num2, "0")

    FOR i& = num2 - 1 TO 0 STEP -1
        'WHILE i& >= 0
        MID$(s$, i& + 1, 1) = MID$("01", (num1 AND 1) + 1, 1)

        num1 = _SHR(num1, 1)


    NEXT i&
    Bin_range$ = s$
END FUNCTION

sub  disassemble(maparray() as string,nStart as _unsigned integer,nStop as _unsigned integer)
       dim addr as _unsigned long
       dim value as _unsigned _byte
       dim lo as _unsigned _byte
       dim hi as _unsigned _byte
       dim maplines(0) as string
       dim op as _unsigned _byte

DIM line_addr AS _UNSIGNED INTEGER
DIM  sInst AS STRING

'TYPE OPS
'    op_name AS STRING
'    addrmode AS _UNSIGNED _BYTE
'    cycles AS _UNSIGNED _BYTE

'addr_mode_IMP = 0
'add_mode_ZPO = 1
'add_mode_ZPY = 2
'add_mode_ABS = 3
'add_mode_ABY = 4
'add_mode_IZX = 5
'add_mode_IMM = 6
'add_mode_REL = 7
'add_mode_ABX = 8
'addr_mode_IND = 9
'addr_mode_IZY = 10
'addr_mode_ZPX = 11


'END TYPE

          redim maplines(65535) as string

           addr = nStart
       while addr <= nStop

               line_addr = addr

               sinst = "$" +hex_range(addr,4)+": "


              op = bus_read(addr,1)
               '_title str$( addr )

               addr  =  addr  + 1

              sinst = sinst + instructions(op).op_name + " "
               if instructions(op).addrmode = addr_mode_IMP then
                 sinst = sinst +" {IMP}"
                 elseif instructions(op).addrmode = add_mode_IMM then
                value = bus_read(addr,1)
                 addr = addr+1
                sinst = sinst +"#$" + hex_range(value,2) + " {IMM}"
               elseif instructions(op).addrmode = add_mode_ABS then
                 lo = bus_read(addr,1)
                    addr= addr+1
                    hi =bus_read(addr,1)
                      addr= addr+1
                   sinst =sinst  + "$" + hex_range(_SHL(hi,8) or lo,4)+" {ABS}"
             elseif instructions(op).addrmode = add_mode_ZPO then

                 lo = bus_read(addr,1)
                  addr= addr+1
                  hi = &H00
                  sinst = sinst +"$" + hex_range(lo,2) + " {ZPO}"
                 elseif instructions(op).addrmode = addr_mode_ZPX then
                   lo = bus_read(addr,1)
                     addr= addr+1
                     hi = &H00
                     sinst=sinst + "$" +  hex_range(lo,2) + ", X {ZPX}"
                     elseif instructions(op).addrmode = add_mode_ZPY then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi = &H00
                     sinst =sinst  + "$" +  hex_range(lo,2) + ", Y {ZPY}"
                     elseif instructions(op).addrmode = add_mode_IZX then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi = &H00
                     sinst =sinst  + "($" +  hex_range(lo,2) + ", X) {IZX}"
                     elseif instructions(opc).addrmode = addr_mode_IZY then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi = &H00
                     sinst =sinst  + "($" +  hex_range(lo,2) + ", Y) {IZY}"
                      elseif  instructions(op).addrmode = add_mode_ABX then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi =bus_read(addr,1)
                      addr= addr+1
                     sinst =sinst  + "$" + hex_range(_SHR(hi,8) or lo,4)+", X {ABX}"
                      elseif  instructions(op).addrmode = add_mode_ABY then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi =bus_read(addr,1)
                      addr= addr+1
                     sinst =sinst  + "$" + hex_range(_SHR(hi,8) or lo,4)+", Y {ABY}"
                       elseif  instructions(op).addrmode = addr_mode_IND then
                     lo = bus_read(addr,1)
                     addr= addr+1
                     hi =bus_read(addr,1)
                      addr= addr+1
                     sinst =sinst  + "($" + hex_range(_SHR(hi,8) or lo,4)+") {IND}"
                       elseif  instructions(op).addrmode = add_mode_REL then
                       value = bus_read(addr,1)
                        addr= addr+1
                     sinst =sinst  + "$" + hex_range(value,2) +" [$"+hex_range(addr + value,4) + "] {REL}"




                  end if
               maparray(line_addr) = sinst
             '  i=i+1




       wend



      '  disassemble  = maplines()




end sub

'uint8_t ADC();  uint8_t AND();  uint8_t ASL();  uint8_t BCC();
'uint8_t BCS();  uint8_t BEQ();  uint8_t BIT();  uint8_t BMI();
'uint8_t BNE();  uint8_t BPL();  uint8_t BRK();  uint8_t BVC();
'uint8_t BVS();  uint8_t CLC();  uint8_t CLD();  uint8_t CLI();
'uint8_t CLV();  uint8_t CMP();  uint8_t CPX();  uint8_t CPY();
'uint8_t DEC();  uint8_t DEX();  uint8_t DEY();  uint8_t EOR();
'uint8_t INC();  uint8_t INX();  uint8_t INY();  uint8_t JMP();
'uint8_t JSR();  uint8_t LDA();  uint8_t LDX();  uint8_t LDY();
'uint8_t LSR();  uint8_t NOP();  uint8_t ORA();  uint8_t PHA();
'uint8_t PHP();  uint8_t PLA();  uint8_t PLP();  uint8_t ROL();
'uint8_t ROR();  uint8_t RTI();  uint8_t RTS();  uint8_t SBC();
'uint8_t SEC();  uint8_t SED();  uint8_t SEI();  uint8_t STA();
'uint8_t STX();  uint8_t STY();  uint8_t TAX();  uint8_t TAY();
'uint8_t TSX();  uint8_t TXA();  uint8_t TXS();  uint8_t TYA();


'uint8_t XXX();



'uint8_t IMP();  uint8_t IMM();
'uint8_t ZP0();  uint8_t ZPX();
'uint8_t ZPY();  uint8_t REL();
'uint8_t ABS();  uint8_t ABX();
'uint8_t ABY();  uint8_t IND();
'uint8_t IZX();  uint8_t IZY();


'$include: 'addressmodes_6502.bm'
'$include: 'instructions_6502.bm'




