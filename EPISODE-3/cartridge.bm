
REM '$include: 'cartridge.bi'



'$include: 'mapper_000.bm'


'SUB cart_cpuWrite (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)
'    'IF addr >= &H0000~% AND addr <= &H1FFF~% THEN
'    '    cpuRam(addr AND &H07FF~%) = byte_data
'    'ELSEIF addr >= &H2000~% AND addr <= &H3FFF THEN
'    '    ppu_cpuWrite addr AND &H0007, byte_data

'    'END IF

'END SUB


'FUNCTION cart_cpuRead (addr AS _UNSIGNED INTEGER, bReadOnly AS _UNSIGNED _BYTE)

'    DIM data_bus AS _UNSIGNED _BYTE


'    'data_bus = &H00
'    'IF addr >= &H0000~% AND addr <= &H1FFF~% THEN
'    '    data_bus = cpuRam(addr AND &H07FF~%)

'    'ELSE
'    '    data_bus = &H00
'    'END IF


'    cart_cpuRead = data_bus
'END FUNCTION

FUNCTION cart_cpuRead (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)
    DIM mapped_addr AS _UNSIGNED LONG

    mapped_addr = 0

    IF cpuMapRead(addr, mapped_addr) THEN
        byte_data = vPRGMemory(mapped_addr)
        cart_cpuRead = 1
    ELSE
        cart_cpuRead = 0
    END IF

END FUNCTION


FUNCTION cart_cpuWrite (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)
    DIM mapped_addr AS _UNSIGNED LONG


    mapped_addr = 0


    IF cpuMapWrite(addr, mapped_addr) THEN
        vPRGMemory(mapped_addr) = byte_data
        cart_cpuWrite = 1
    ELSE
        cart_cpuWrite = 0
    END IF

END FUNCTION




FUNCTION cart_ppuWrite (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)
    DIM mapped_addr AS _UNSIGNED LONG

    mapped_addr = 0

    IF ppuMapRead(addr, mapped_addr) THEN
        vCHRMemory(mapped_addr) = byte_data
        cart_ppuWrite = 1
    ELSE
        cart_ppuWrite = 0
    END IF

END FUNCTION


FUNCTION cart_ppuRead (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)
    DIM mapped_addr AS _UNSIGNED LONG

    mapped_addr = 0

    IF ppuMapRead(addr, mapped_addr) THEN
        byte_data = vCHRMemory(mapped_addr)
        cart_ppuRead = 1
    ELSE
        cart_ppuRead = 0
    END IF

END FUNCTION



SUB cartridge (cart AS STRING, cart_info_disp AS _BYTE)

    'DIM vPRGMemory(0) AS _UNSIGNED _BYTE
    'DIM vCHRMemory(0) AS _UNSIGNED _BYTE
    'DIM nMapperID AS _UNSIGNED _BYTE
    'DIM nPRGBanks AS _UNSIGNED _BYTE
    'DIM nCHRBanks AS _UNSIGNED _BYTE

    'DIM nMapperID AS _UNSIGNED _BYTE
    DIM orig_dest AS _UNSIGNED LONG
    DIM nPRGBanks AS _UNSIGNED _BYTE
    DIM nCHRBanks AS _UNSIGNED _BYTE
    $CONSOLE

    _CONSOLETITLE "NEStea Debuggger"


    orig_dest = _DEST
    'mapper ????
    IF cart_info_disp = 1 THEN
        _CONSOLE ON


        _DEST _CONSOLE
    ELSE
        _CONSOLE OFF


    END IF

    nMapperID = 0
    nPRGBanks = 0
    nCHRBanks = 0

    bImageValid = -1


    file$ = cart

    IF _FILEEXISTS(file$) THEN
        PRINT "found rom"



        OPEN file$ FOR BINARY AS #1


        GET #1, , header

        PRINT "magic number: ";
        PRINT header.name_nes



        IF header.mapper1 AND &H04 THEN
            PRINT "has trainer-skipping"
            SEEK #1, 512

        ELSE
            PRINT "no trainer"
        END IF



        IF header.mapper1 AND &H01 THEN
            mirror$ = "VERTICAL"
        ELSE
            mirror$ = "HORIZONTAL"
        END IF
        'ONESCREEN_LO
        'ONESCREEN_HI


        PRINT "mirror mode: "; mirror$


        nMapperID = _SHL(_SHR(header.mapper2, 4), 4) OR _SHR(header.mapper1, 4)



        nFileType = 1

        IF header.mapper2 AND &H0C = &H08 THEN
            nFileType = 2
        END IF



        IF nFileType = 0 THEN

        END IF

        IF nFileType = 1 THEN
            PRINT "file type:" + STR$(nFileType)
            nPRGBanks = header.prg_rom_chunks
            REDIM vPRGMemory(nPRGBanks * 16384 - 1)
            GET #1, , vPRGMemory()
            PRINT "NUM PRG BANKS:" + STR$(nPRGBanks)
            PRINT "PRG ROM SIZE:" + STR$(LEN(vPRGMemory()))

            nCHRBanks = header.chr_rom_chunks
            REDIM vCHRMemory(nCHRBanks * 8192 - 1)
            GET #1, , vCHRMemory()

            PRINT "NUM CHR BANKS:" + STR$(nCHRBanks)
            IF LEN(vCHRMemory()) = 0 THEN
                PRINT "CHR RAM"
            ELSE
                '   PRINT "CHR ROM"
                PRINT "CHR ROM SIZE:" + STR$(LEN(vCHRMemory()))

            END IF
        END IF



        '  PRINT vPRGMemory(0)

        IF nFileType = 2 THEN
            PRINT nFileType
        END IF

        SELECT CASE nMapperID

            CASE 0:

                PRINT "valid mapper-found Mapper:" + STR$(nMapperID)


                Mapper nPRGBanks, nCHRBanks



            CASE ELSE:
                PRINT "invalid mapper:" + STR$(nMapperID)
        END SELECT

        bImageValid = 1
        CLOSE #1

    ELSE
        bImageValid = 0
        PRINT "rom not found"
    END IF


    IF cart_info_disp = 1 THEN
        _DEST orig_dest
    END IF
END SUB


FUNCTION cart_ImageValid ()

    cart_ImageValid = bImageValid
END FUNCTION





