

'A instructions----------------------COMPLETE needs testing

FUNCTION ADC~%

   fetch 'warning! not finished
    temp = cpu_regs.a_reg + fetched + get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C,abs(temp > 255 )
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = 0)
    set_flag cpu_regs.flags.V,abs( NOT(cpu_regs.a_reg XOR fetched) AND (cpu_regs.a_reg XOR temp) AND &H0080~%)

            ' ((abs((cpu_regs.a_reg XOR fetched)=0) AND abs(cpu_regs.a_reg XOR temp)) AND &H0080)

          '   abs( (NOT(cpu_regs.a_reg XOR fetched) AND (cpu_regs.a_reg XOR temp)) AND &H0080)

      'idk if this needs right  bit shift
    set_flag cpu_regs.flags.N,  abs(temp and &H80~%)
    cpu_regs.a_reg =abs(temp AND &H00FF~%)
    ADC~% = 1


END FUNCTION



FUNCTION SBC~%
      dim value as _unsigned integer


   fetch

    value = fetched XOR &H00FF~%

    temp = cpu_regs.a_reg + value + get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C, abs(temp AND &HFF00%)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF%) = 0)
    set_flag cpu_regs.flags.V,abs( (temp XOR cpu_regs.a_reg) AND (temp XOR value) AND &H0080~%) 'idk if needs right bit shift
    set_flag cpu_regs.flags.N, abs((temp and &H80~%))
    cpu_regs.a_reg = temp AND &H00FF~%

    SBC~% = 1


END FUNCTION



FUNCTION aAND~%
   fetch
    cpu_regs.a_reg = cpu_regs.a_reg AND fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H0)
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg AND &H80~%)

    aAND~% = 1


END FUNCTION

FUNCTION ASL~%     '--------------works as expected for now COMPLETE


  fetch
    temp = _SHL(fetched, 1)
    set_flag cpu_regs.flags.C, abs((temp AND &HFF00~%) > 0)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = 0)
    set_flag cpu_regs.flags.N, abs(temp and &H80~%)

    IF instructions(opcode).addrmode  = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF~%
    ELSE
        write_to_bus addr_abs, temp AND &H00FF~%
    END IF

       ASL~% = 0

END FUNCTION
'------------------------------------------------

'B instructions------------------------COMPLETE needs testing
FUNCTION BCC~%


    IF get_flag(cpu_regs.flags.C) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
     BCC~% = 0

END FUNCTION

FUNCTION BCS~%


    IF get_flag(cpu_regs.flags.C) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF



     BCS~%  = 0
END FUNCTION

FUNCTION BEQ~%

    IF get_flag(cpu_regs.flags.Z) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
    BEQ~% = 0
END FUNCTION




FUNCTION BIT~%



   fetch

    temp = cpu_regs.a_reg AND fetched
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H00~%)
    set_flag cpu_regs.flags.N,abs(fetched AND _shl(1,7) )
    set_flag cpu_regs.flags.V, abs(fetched AND _SHL(1, 6) )


      BIT~% = 0
END FUNCTION

FUNCTION BMI~%



    IF get_flag(cpu_regs.flags.N) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF

     BMI~%  = 0

END FUNCTION

FUNCTION BNE~%


    IF get_flag(cpu_regs.flags.Z) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF
    BNE~% = 0
END FUNCTION


FUNCTION BPL~%




    IF get_flag(cpu_regs.flags.N) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF

    BPL~% = 0


END FUNCTION

FUNCTION BRK~%    'tested-WORKS FINE-sortof


     cpu_regs.pc = cpu_regs.pc + 1
    set_flag cpu_regs.flags.I, 1
    write_to_bus &H0100~% + cpu_regs.stkp, _SHR(cpu_regs.pc, 8) AND &H00FF~%
    cpu_regs.stkp = cpu_regs.stkp - 1
    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.pc AND &H00FF~%
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 1
    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.status
    cpu_regs.stkp = cpu_regs.stkp - 1
    set_flag cpu_regs.flags.B, 0

   '  ram(02) = &H1E
    ' _title(str$(ram(03)))
    cpu_regs.pc = read_from_bus(&HFFFE~%) OR _SHL(read_from_bus(&HFFFF~%), 8)

      BRK~% = 0
END FUNCTION


FUNCTION BVC~%



    IF get_flag(cpu_regs.flags.V) = 0 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF


      BVC~% = 0

END FUNCTION



FUNCTION BVS~%


    IF get_flag(cpu_regs.flags.V) = 1 THEN
        cycles = cycles + 1

        addr_abs = cpu_regs.pc + addr_rel

        IF (addr_abs AND &HFF00~%) <> (cpu_regs.pc AND &HFF00~%) THEN
            cycles = cycles + 1

        END IF
        cpu_regs.pc = addr_abs


    END IF


     BVS~% = 0

END FUNCTION
'----------------------------------------------------



'C instructions ---------------------COMPLETE needs testing
FUNCTION CLC~%


    set_flag cpu_regs.flags.C, 0


      CLC~% = 0
END FUNCTION

FUNCTION CLD~%


    set_flag cpu_regs.flags.D, 0

    CLD~%  = 0
END FUNCTION

FUNCTION CLI~%


    set_flag cpu_regs.flags.I, 0
    CLI~% = 0
END FUNCTION

FUNCTION CLV~%


    set_flag cpu_regs.flags.V, 0
      CLV~% = 0
END FUNCTION

FUNCTION CMP~%

   fetch

    temp = cpu_regs.a_reg - fetched
    set_flag cpu_regs.flags.C, abs(cpu_regs.a_reg >= fetched)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%)= &H00~% )
    set_flag cpu_regs.flags.N, abs(temp and &H0080~%)


    CMP~% = 1
END FUNCTION


FUNCTION CPX~%

  fetch

    temp = cpu_regs.x_reg - fetched
    set_flag cpu_regs.flags.C, abs(cpu_regs.x_reg >= fetched)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H00)
    set_flag cpu_regs.flags.N,  abs(temp and &H0080~%)


    CPX~% = 0
END FUNCTION




FUNCTION CPY~%

  fetch

    temp = cpu_regs.y_reg - fetched
    set_flag cpu_regs.flags.C, abs(cpu_regs.y_reg >= fetched)
    set_flag cpu_regs.flags.Z,abs( (temp AND &H00FF~%) = &H00)
    set_flag cpu_regs.flags.N, abs(temp and &H0080~%)


    CPY~% = 0

END FUNCTION


'---------------------------------------


'D instructions------------------------------COMPLETE needs testing
FUNCTION DEC~%

   fetch

    temp = fetched - 1
    write_to_bus addr_abs, temp AND &H00FF~%
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H0000)
    set_flag cpu_regs.flags.N,  abs(temp and &H0080~%)
    DEC~% = 0
END FUNCTION

FUNCTION DEX~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.x_reg = cpu_regs.x_reg - 1
    set_flag cpu_regs.flags.Z, abs(cpu_regs.x_reg = &H00)

    set_flag cpu_regs.flags.N, abs(cpu_regs.x_reg AND &H80~% )
    DEX~% = 0
END FUNCTION

FUNCTION DEY~%
    'SHARED cpu_regs AS regs_6502


    cpu_regs.y_reg = cpu_regs.y_reg - 1
    set_flag cpu_regs.flags.Z,abs( cpu_regs.y_reg = &H00)

    set_flag cpu_regs.flags.N, abs( cpu_regs.y_reg AND &H80~% )
    DEY~% = 0
END FUNCTION
'------------------------------------------------






'E instruction-----------------------COMPLETE needs testing
FUNCTION EOR~%

     fetch

    cpu_regs.a_reg = cpu_regs.a_reg XOR fetched
    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00)
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg and &H80~%)

    EOR~% = 1

END FUNCTION


'------------------------------------

'I instruction-----------------------COMPLETE needs testing
FUNCTION INC~%

     fetch
    temp = fetched + 1
    write_to_bus addr_abs, temp AND &H00FF~%
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H0000)
    set_flag cpu_regs.flags.N, abs(temp and &H0080~%)

    INC~% = 0

END FUNCTION


FUNCTION INX~%

    cpu_regs.x_reg = cpu_regs.x_reg + 1
    set_flag cpu_regs.flags.Z,abs( cpu_regs.x_reg = &H00)

    set_flag cpu_regs.flags.N, abs(cpu_regs.x_reg AND &H80~%)
    INX~% = 0
END FUNCTION

FUNCTION INY~%

    cpu_regs.y_reg = cpu_regs.y_reg + 1
    set_flag cpu_regs.flags.Z, abs(cpu_regs.y_reg = &H00 )

    set_flag cpu_regs.flags.N, abs(cpu_regs.y_reg AND &H80~%)
    INY~% = 0
END FUNCTION

'------------------------------------


'J instructions---------------------COMPLETE needs testing

FUNCTION JMP~%



    cpu_regs.pc = addr_abs
    JMP~% = 0
END FUNCTION


FUNCTION JSR~%

           cpu_regs.pc = cpu_regs.pc - 1

    write_to_bus &H0100~% + cpu_regs.stkp, (_SHR(cpu_regs.pc, 8)) AND &H00FF~%

        cpu_regs.stkp = cpu_regs.stkp - 1

    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.pc AND &H00FF~%

        cpu_regs.stkp = cpu_regs.stkp - 1

    cpu_regs.pc = addr_abs
    JSR~% = 0

END FUNCTION



'-----------------------------------


'L instructions---------------COMPLETE needs testing
FUNCTION LDA~%

     fetch
    cpu_regs.a_reg = fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00)

    set_flag cpu_regs.flags.N,abs(cpu_regs.a_reg AND &H80~%)
    LDA~% = 1
END FUNCTION


FUNCTION LDX~%     'tested-WORKS FINE
  fetch
    cpu_regs.x_reg = fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.x_reg = &H00)

    set_flag cpu_regs.flags.N, abs(cpu_regs.x_reg AND &H80~%)
    LDX~% = 1
END FUNCTION

FUNCTION LDY~%

   fetch
    cpu_regs.y_reg = fetched
    set_flag cpu_regs.flags.Z, abs(cpu_regs.y_reg = &H00)

    set_flag cpu_regs.flags.N, abs(cpu_regs.y_reg AND &H80~%)
    LDY~% = 1
END FUNCTION

FUNCTION LSR~%

   fetch

    set_flag cpu_regs.flags.C, fetched AND &H0001~%

    temp = _SHR(fetched, 1)

    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H0000)
    set_flag cpu_regs.flags.N, abs(temp and &H0080~%)
    IF instructions(opcode).addrmode   = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF~%
    ELSE
        write_to_bus addr_abs, temp AND &H00FF~%
           ' cpu_regs.a_reg = 60
    END IF


    LSR~% = 0
END FUNCTION

'------------------------------


'N instructions-----------COMPLETE needs testing
FUNCTION NOP~%
    'SHARED opcode AS _UNSIGNED _BYTE
  '  opcode = &H00
    SELECT CASE opcode

        CASE &H1C
        CASE &H3C
        CASE &H5C
        CASE &H7C
        CASE &HDC
        CASE &HFC
         NOP~% = 1
         exit function
    END SELECT
    '  NOP~% = 1
   NOP~% = 0
END FUNCTION

'----------------------------


'O instructions------------------COMPLETE needs testing

FUNCTION ORA~%

 fetch

    cpu_regs.a_reg = cpu_regs.a_reg OR fetched

    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00)
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg AND &H80~%)


    ORA~% = 1
END FUNCTION

'--------------------------------


'P instructions----------------------COMPLETE needs testing

FUNCTION PHA~%

    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.a_reg
    cpu_regs.stkp = cpu_regs.stkp - 1
    PHA~% = 0
END FUNCTION


FUNCTION PHP~%


    write_to_bus &H0100~% + cpu_regs.stkp, cpu_regs.status OR cpu_regs.flags.B OR cpu_regs.flags.U
    set_flag cpu_regs.flags.B, 0
    set_flag cpu_regs.flags.U, 0
    cpu_regs.stkp = cpu_regs.stkp - 1
    PHP~% = 0

END FUNCTION




FUNCTION PLA~%


    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.a_reg = read_from_bus(&H0100~% + cpu_regs.stkp)
    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00  )
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg and &H0080~% )
    PLA~% = 0


END FUNCTION


FUNCTION PLP~%


    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.status = read_from_bus(&H0100~% + cpu_regs.stkp)
    set_flag cpu_regs.flags.U, 1
    PLP~% = 0


END FUNCTION







'-----------------------------------



'R instructions----------------------COMPLETE needs testing





FUNCTION ROL~%

  fetch

    temp = _SHL(fetched , 1) OR get_flag(cpu_regs.flags.C)
    set_flag cpu_regs.flags.C, abs(temp  and &HFF00~%)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H0000)
    set_flag cpu_regs.flags.N, abs( temp AND &H0080~%)

    IF instructions(opcode).addrmode   = addr_mode_IMP THEN
      cpu_regs.a_reg = temp AND &H00FF~%

    ELSE
       write_to_bus addr_abs, temp AND &H00FF~%
    END IF
     ROL~%  = 0

END FUNCTION


FUNCTION  ROR~%

 fetch


    temp = _SHL(get_flag(cpu_regs.flags.C), 7) OR _SHR(fetched, 1)
    set_flag cpu_regs.flags.C, abs( fetched and &H01~%)
    set_flag cpu_regs.flags.Z, abs((temp AND &H00FF~%) = &H0000)
    set_flag cpu_regs.flags.N, abs( temp AND &H0080~% )

    IF instructions(opcode).addrmode  = addr_mode_IMP THEN
        cpu_regs.a_reg = temp AND &H00FF~%
    ELSE
        write_to_bus addr_abs, temp AND &H00FF~%
    END IF

      ROR~%  = 0

END FUNCTION




FUNCTION RTI~%


    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.status = read_from_bus(&H0100~% + cpu_regs.stkp)
    cpu_regs.status = cpu_regs.status and  NOT  cpu_regs.flags.B
    cpu_regs.status = cpu_regs.status and  NOT  cpu_regs.flags.U

    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.pc = read_from_bus(&H0100~% + cpu_regs.stkp)
    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.pc = cpu_regs.pc OR _SHL(read_from_bus(&H0100~% + cpu_regs.stkp), 8)
    RTI~% = 0

END FUNCTION


FUNCTION RTS~%

    cpu_regs.stkp = cpu_regs.stkp + 1
   cpu_regs.pc = read_from_bus(&H0100~% + cpu_regs.stkp)
    cpu_regs.stkp = cpu_regs.stkp + 1
    cpu_regs.pc  = cpu_regs.pc  OR _SHL(read_from_bus(&H0100~% + cpu_regs.stkp), 8)


    cpu_regs.pc = cpu_regs.pc + 1

    RTS~% = 0
END FUNCTION







'-----------------------------------


'S instructions----------------------COMPLETE needs testing

FUNCTION SEC~%


    set_flag cpu_regs.flags.C, 1
    SEC~% = 0
END FUNCTION


FUNCTION SEI~%  'tested-WORKS FINE


    set_flag cpu_regs.flags.I, 1
    SEI~%  = 0
END FUNCTION

FUNCTION SED~%


    set_flag cpu_regs.flags.D, 1

     SED~% = 0

END FUNCTION

FUNCTION STA~%


    write_to_bus addr_abs, cpu_regs.a_reg
    STA~% =0

END FUNCTION

FUNCTION STX~%
    'SHARED cpu_regs AS regs_6502

    write_to_bus addr_abs, cpu_regs.x_reg
    STX~% =0



    END FUNCTION

FUNCTION STY~%

    write_to_bus addr_abs, cpu_regs.y_reg

    STY~% =0



END FUNCTION

'-------------------------------------






'T instructions-------------------------------------COMPLETE needs testing
FUNCTION TAX%

    cpu_regs.x_reg = cpu_regs.a_reg


    set_flag cpu_regs.flags.Z,abs( cpu_regs.x_reg = &H00 )
    set_flag cpu_regs.flags.N,abs( cpu_regs.x_reg AND &H80~% )

     TAX%  = 0
END FUNCTION

FUNCTION TAY%

    cpu_regs.y_reg = cpu_regs.a_reg


    set_flag cpu_regs.flags.Z, abs(cpu_regs.y_reg = &H00)
    set_flag cpu_regs.flags.N, abs(cpu_regs.y_reg AND &H80~%)

    TAY%  = 0

END FUNCTION


FUNCTION TSX%

    cpu_regs.x_reg = cpu_regs.stkp


    set_flag cpu_regs.flags.Z, abs(cpu_regs.x_reg = &H00 )
    set_flag cpu_regs.flags.N, abs(cpu_regs.x_reg AND &H80~%)
     TSX% = 0
END FUNCTION






FUNCTION TXA~%

    cpu_regs.a_reg = cpu_regs.x_reg


    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00 )
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg AND &H80~%  )
     TXA~% = 0
END FUNCTION





FUNCTION TXS~%


    cpu_regs.stkp = cpu_regs.x_reg
    TXS~% = 0
END FUNCTION


FUNCTION TYA~%

    cpu_regs.a_reg = cpu_regs.y_reg


    set_flag cpu_regs.flags.Z, abs(cpu_regs.a_reg = &H00  )
    set_flag cpu_regs.flags.N, abs(cpu_regs.a_reg AND &H80~% )
     TYA~% = 0
END FUNCTION

'---------------------------------------------------------



'NOP------------------------------------------------------COMPLETE needs testing
FUNCTION XXX~%
    XXX~%  = 0
END FUNCTION

'-------------------------------------

sub execute_instruction(additional_cycle1 as _unsigned _byte,additional_cycle2 as _unsigned _byte,op as _unsigned _byte)
        select case op




        case &H00:  ' BRK         { "BRK", &a::BRK, &a::IMM, 7 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = BRK

        case &H01  ' ORA              { "ORA", &a::ORA, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = ORA

        case &H02  ' ???           { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H03  ' ???          { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H04  ' ???            { "???", &a::NOP, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H05  ' ORA           { "ORA", &a::ORA, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ORA

        case &H06  ' ASL            { "ASL", &a::ASL, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ASL

        case &H07  ' ???            { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H08  ' PHP             { "PHP", &a::PHP, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = PHP

        case &H09  ' ORA            { "ORA", &a::ORA, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = ORA

        case &H0A  ' ASL            { "ASL", &a::ASL, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = ASL

        case &H0B   '???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H0C  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H0D  ' ORA             { "ORA", &a::ORA, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = ORA

        case &H0E ' ASL              { "ASL", &a::ASL, &a::ABS, 6 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = ASL

        case &H0F   ' ???           { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX





        case &H10: ' BPL           { "BPL", &a::BPL, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 = BPL

        case &H11  ' ORA             { "ORA", &a::ORA, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = ORA

        case &H12  ' ???            { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H13  ' ???               { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H14  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H15  ' ORA            { "ORA", &a::ORA, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = ORA

        case &H16  ' ASL           { "ASL", &a::ASL, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = ASL

        case &H17  ' ???             { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H18  ' CLC            { "CLC", &a::CLC, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLC

        case &H19  ' ORA             { "ORA", &a::ORA, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = ORA

        case &H1A  ' ???             { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H1B   '???              { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H1C  ' ???              { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H1D  ' ORA             { "ORA", &a::ORA, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = ORA

        case &H1E ' ASL              { "ASL", &a::ASL, &a::ABX, 7 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = ASL

        case &H1F   ' ???           { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H20: ' JSR          { "JSR", &a::JSR, &a::ABS, 6 },
        additional_cycle1 = add_ABS
        additional_cycle2 = JSR

        case &H21  ' AND              { "AND", &a::AND, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = aAND

        case &H22  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H23  ' ???            { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H24  ' BIT             "BIT", &a::BIT, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = BIT

        case &H25  ' AND           {{ "AND", &a::AND, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = aAND

        case &H26  ' ROL             { "ROL", &a::ROL, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ROL

        case &H27  ' ???           { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H28  ' PLP            { "PLP", &a::PLP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = PLP

        case &H29  ' AND            { "AND", &a::AND, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = aAND

        case &H2A  ' ROL            { "ROL", &a::ROL, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = ROL

        case &H2B  ' ???            { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H2C  ' BIT           { "BIT", &a::BIT, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = BIT

        case &H2D  ' AND            { "AND", &a::AND, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = aAND

        case &H2E ' ROL              { "ROL", &a::ROL, &a::ABS, 6 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = ROL

        case &H2F   ' ???            { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H30: ' BMI      { "BMI", &a::BMI, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 = BMI

        case &H31  ' AND      { "AND", &a::AND, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = aAND

        case &H32  ' ???           { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H33  ' ???             { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H34  ' ???            { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H35  ' AND           { "AND", &a::AND, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = aAND

        case &H36  ' ROL            { "ROL", &a::ROL, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = ROL

        case &H37  ' ???            { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H38  ' SEC           { "SEC", &a::SEC, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 =SEC

        case &H39  ' AND            { "AND", &a::AND, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = aAND

        case &H3A  ' ???             { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H3B  ' ???              { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H3C  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H3D  ' AND            { "AND", &a::AND, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = aAND

        case &H3E ' ROL              { "ROL", &a::ROL, &a::ABX, 7 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = ROL

        case &H3F   ' ???           { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &H40: ' RTI               { "RTI", &a::RTI, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = RTI

        case &H41  ' EOR           { "EOR", &a::EOR, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = EOR

        case &H42  ' ???               { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H43  ' ???           { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H44  ' ???            { "???", &a::NOP, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H45  ' EOR             { "EOR", &a::EOR, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = EOR

        case &H46  ' LSR            { "LSR", &a::LSR, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LSR

        case &H47  ' ???              { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H48  ' PHA            { "PHA", &a::PHA, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = PHA

        case &H49  ' EOR              { "EOR", &a::EOR, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = EOR

        case &H4A  ' LSR              { "LSR", &a::LSR, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = LSR

        case &H4B  ' ???            { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H4C  ' JMP            { "JMP", &a::JMP, &a::ABS, 3 },
        additional_cycle1 = add_ABS
        additional_cycle2 = JMP

        case &H4D  ' EOR            { "EOR", &a::EOR, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = EOR

        case &H4E ' LSR              { "LSR", &a::LSR, &a::ABS, 6 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = LSR


        case &H4F   ' ??? { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H50: ' BVC            { "BVC", &a::BVC, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 = BVC

        case &H51  ' EOR             { "EOR", &a::EOR, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = EOR

        case &H52  ' ???            { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H53  ' ???              { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H54  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H55  ' EOR           { "EOR", &a::EOR, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = EOR

        case &H56  ' LSR           { "LSR", &a::LSR, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = LSR

        case &H57  ' ???             { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H58  ' CLI             { "CLI", &a::CLI, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLI

        case &H59  ' EOR            { "EOR", &a::EOR, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = EOR

        case &H5A  ' ???            { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H5B  ' ???           { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H5C  ' ???            { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H5D  ' EOR            { "EOR", &a::EOR, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = EOR

        case &H5E ' LSR               { "LSR", &a::LSR, &a::ABX, 7 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = LSR

        case &H5F   ' ???            { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H60: ' RTS              { "RTS", &a::RTS, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = RTS

        case &H61  ' ADC             { "ADC", &a::ADC, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = ADC

        case &H62  ' ???                { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H63  ' ???                 { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H64  ' ???             { "???", &a::NOP, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H65  ' ADC             { "ADC", &a::ADC, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ADC

        case &H66  ' ROR             { "ROR", &a::ROR, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = ROR

        case &H67  ' ???              { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H68  ' PLA              { "PLA", &a::PLA, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = PLA

        case &H69  ' ADC             { "ADC", &a::ADC, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = ADC

        case &H6A  ' ROR              { "ROR", &a::ROR, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = ROR

        case &H6B  ' ???              { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H6C  ' JMP            { "JMP", &a::JMP, &a::IND, 5 },
        additional_cycle1 = add_IND
        additional_cycle2 = JMP

        case &H6D  ' ADC            { "ADC", &a::ADC, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = ADC

        case &H6E ' ROR             { "ROR", &a::ROR, &a::ABS, 6 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = ROR

        case &H6F   ' ???             { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &H70: ' BVS              { "BVS", &a::BVS, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 =  BVS

        case &H71  ' ADC             { "ADC", &a::ADC, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = ADC

        case &H72  ' ???                 { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H73  ' ???               { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H74  ' ???              { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H75  ' ADC             { "ADC", &a::ADC, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = ADC

        case &H76  ' ROR            { "ROR", &a::ROR, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = ROR

        case &H77  ' ???               { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H78  ' SEI                { "SEI", &a::SEI, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = SEI

        case &H79  ' ADC              { "ADC", &a::ADC, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = ADC

        case &H7A  ' ???               { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H7B  ' ???              { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H7C  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H7D  ' ADC             { "ADC", &a::ADC, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = ADC

        case &H7E ' ROR              { "ROR", &a::ROR, &a::ABX, 7 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = ROR

        case &H7F   ' ???             { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX





        case &H80: ' ???                { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 =  NOP

        case &H81  ' STA             { "STA", &a::STA, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = STA

        case &H82  ' ???              { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H83  ' ???               { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H84  ' STY            { "STY", &a::STY, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STY

        case &H85  ' STA             { "STA", &a::STA, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STA

        case &H86  ' STX              { "STX", &a::STX, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = STX

        case &H87  ' ???           { "???", &a::XXX, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H88  ' DEY           { "DEY", &a::DEY, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = DEY

        case &H89  ' ???            { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H8A  ' TXA             { "TXA", &a::TXA, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TXA

        case &H8B  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H8C  'STY              { "STY", &a::STY, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = STY

        case &H8D  ' STA               { "STA", &a::STA, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = STA

        case &H8E ' STX              { "STX", &a::STX, &a::ABS, 4 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = STX

        case &H8F   ' ???            { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX







        case &H90: ' BCC           { "BCC", &a::BCC, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 =  BCC

        case &H91  ' STA           { "STA", &a::STA, &a::IZY, 6 },
        additional_cycle1 = add_IZY
        additional_cycle2 = STA

        case &H92  ' ???          { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H93  ' ???            { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H94  ' STY           { "STY", &a::STY, &a::ZPX, 4 }
        additional_cycle1 = add_ZPX
        additional_cycle2 = STY

        case &H95  ' STA           ,{ "STA", &a::STA, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = STA

        case &H96  ' STX            { "STX", &a::STX, &a::ZPY, 4 },
        additional_cycle1 = add_ZPY
        additional_cycle2 = STX

        case &H97  ' ???            { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H98  ' TYA            { "TYA", &a::TYA, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TYA

        case &H99  ' STA              { "STA", &a::STA, &a::ABY, 5 },
        additional_cycle1 = add_ABY
        additional_cycle2 = STA

        case &H9A  ' TXS             { "TXS", &a::TXS, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TXS

        case &H9B  ' ???              { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &H9C  ' ???             { "???", &a::NOP, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &H9D  ' STA              { "STA", &a::STA, &a::ABX, 5 },
        additional_cycle1 = add_ABX
        additional_cycle2 = STA

        case &H9E  ' ???              { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 =  addr_IMP
        additional_cycle2 = XXX

        case &H9F  ' ???            { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX



        case &HA0: ' LDY           { "LDY", &a::LDY, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 =  LDY

        case &HA1  'LDA             { "LDA", &a::LDA, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = LDA

        case &HA2  ' LDX             { "LDX", &a::LDX, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = LDX

        case &HA3  ' ???               { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HA4  ' LDY           { "LDY", &a::LDY, &a::ZP0, 3 },
        additional_cycle1 =  addr_ZPO
        additional_cycle2 = LDY

        case &HA5  ' LDA             { "LDA", &a::LDA, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LDA

        case &HA6  ' LDX              { "LDX", &a::LDX, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = LDX

        case &HA7  ' ???             { "???", &a::XXX, &a::IMP, 3 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HA8  ' TAY              { "TAY", &a::TAY, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TAY

        case &HA9  ' LDA              { "LDA", &a::LDA, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = LDA

        case &HAA  ' TAX            { "TAX", &a::TAX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TAX

        case &HAB  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HAC  ' LDY             { "LDY", &a::LDY, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = LDY

        case &HAD  ' LDA             { "LDA", &a::LDA, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = LDA

        case &HAE  ' LDX             { "LDX", &a::LDX, &a::ABS, 4 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = LDX


        case &HAF  ' ???    { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX





        case &HB0: ' BCS          { "BCS", &a::BCS, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 =  BCS

        case &HB1  'LDA             { "LDA", &a::LDA, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = LDA

        case &HB2  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB3  ' ???             { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB4  ' LDY           { "LDY", &a::LDY, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = LDY

        case &HB5  ' LDA              { "LDA", &a::LDA, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = LDA

        case &HB6  ' LDX            { "LDX", &a::LDX, &a::ZPY, 4 },
        additional_cycle1 = add_ZPY
        additional_cycle2 = LDX

        case &HB7  ' ???            { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HB8  'CLV             { "CLV", &a::CLV, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLV

        case &HB9  ' LDA              { "LDA", &a::LDA, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = LDA

        case &HBA  ' TSX             { "TSX", &a::TSX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = TSX

        case &HBB  ' ???             { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HBC  ' LDY            { "LDY", &a::LDY, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = LDY

        case &HBD  ' LDA              "LDA", &a::LDA, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 = LDA

        case &HBE  ' LDX              {{ "LDX", &a::LDX, &a::ABY, 4 },
        additional_cycle1 =  add_ABY
        additional_cycle2 = LDX

        case &HBF  ' ???                { "???", &a::XXX, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HC0: ' CPY           { "CPY", &a::CPY, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 =  CPY

        case &HC1  'CMP             { "CMP", &a::CMP, &a::IZX, 6 },
        additional_cycle1 = add_IZX
        additional_cycle2 = CMP

        case &HC2  ' ???               { "???", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HC3  ' ???              { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HC4  ' CPY                  { "CPY", &a::CPY, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CPY

        case &HC5  ' CMP             { "CMP", &a::CMP, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CMP

        case &HC6  ' DEC             { "DEC", &a::DEC, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = DEC

        case &HC7  ' ???             { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HC8  'INY              { "INY", &a::INY, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = INY

        case &HC9  ' CMP             { "CMP", &a::CMP, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = CMP

        case &HCA  ' DEX              { "DEX", &a::DEX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = DEX

        case &HCB  ' ???               { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HCC  ' CPY              { "CPY", &a::CPY, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = CPY

        case &HCD  ' CMP            { "CMP", &a::CMP, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = CMP

        case &HCE  ' DEC             { "DEC", &a::DEC, &a::ABS, 6 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = DEC


        case &HCF  ' ???  { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX






        case &HD0: ' BNE            { "BNE", &a::BNE, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 =  BNE

        case &HD1  'CMP             { "CMP", &a::CMP, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = CMP

        case &HD2  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD3  ' ???              { "???", &a::XXX, &a::IMP, 8 }
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD4  ' ???             ,{ "???", &a::NOP, &a::IMP, 4 }
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HD5  ' CMP              ,{ "CMP", &a::CMP, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = CMP

        case &HD6  ' DEC              { "DEC", &a::DEC, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = DEC

        case &HD7  ' ???              { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HD8  'CLD              { "CLD", &a::CLD, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = CLD

        case &HD9  ' CMP               { "CMP", &a::CMP, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = CMP

        case &HDA  ' NOP                { "NOP", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HDB  ' ???             '{ "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HDC  ' ???             { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HDD  ' CMP                 { "CMP", &a::CMP, &a::ABX, 4 },
        additional_cycle1 = add_ABX
        additional_cycle2 =CMP

        case &HDE  ' DEC                { "DEC", &a::DEC, &a::ABX, 7 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = DEC

        case &HDF  ' ???               { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX






        case &HE0: ' CPX
        additional_cycle1 = addr_IMM       ' { "CPX", &a::CPX, &a::IMM, 2 }
        additional_cycle2 =  CPX

        case &HE1  'SBC
        additional_cycle1 = add_IZX   ',{ "SBC", &a::SBC, &a::IZX, 6 }
        additional_cycle2 = SBC

        case &HE2 ' ???
        additional_cycle1 = addr_IMP ' ,{ "???", &a::NOP, &a::IMP, 2 },
        additional_cycle2 = NOP

        case &HE3 ' ???               { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE4 ' CPX                   { "CPX", &a::CPX, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = CPX

        case &HE5  ' SBC                { "SBC", &a::SBC, &a::ZP0, 3 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = SBC

        case &HE6 ' INC               { "INC", &a::INC, &a::ZP0, 5 },
        additional_cycle1 = addr_ZPO
        additional_cycle2 = INC

        case &HE7  '???               { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HE8  ' INX              { "INX", &a::INX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = INX

        case &HE9  ' SBC              { "SBC", &a::SBC, &a::IMM, 2 },
        additional_cycle1 = addr_IMM
        additional_cycle2 = SBC

        case &HEA ' NOP               { "NOP", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HEB ' ???             { "???", &a::SBC, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = sbc

        case &HEC ' CPX            { "CPX", &a::CPX, &a::ABS, 4 },
        additional_cycle1 = add_ABS
        additional_cycle2 = cpx

        case &HED  ' SBC              { "SBC", &a::SBC, &a::ABS, 4 },
        additional_cycle1 =  add_ABS
        additional_cycle2 = SBC

        case &HEE ' INC                { "INC", &a::INC, &a::ABS, 6 },
        additional_cycle1 = add_ABS
        additional_cycle2 = INC

        case &HEF  '???               { "???", &a::XXX, &a::IMP, 5 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX




        case &HF0: ' BEQ           { "BEQ", &a::BEQ, &a::REL, 2 },
        additional_cycle1 = add_REL
        additional_cycle2 =  BEQ

        case &HF1  'SBC                { "SBC", &a::SBC, &a::IZY, 5 },
        additional_cycle1 = add_IZY
        additional_cycle2 = SBC

        case &HF2  ' ???             { "???", &a::XXX, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HF3  ' ???                { "???", &a::XXX, &a::IMP, 8 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HF4  ' ???               { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HF5  ' SBC            { "SBC", &a::SBC, &a::ZPX, 4 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = SBC

        case &HF6  ' INC            { "INC", &a::INC, &a::ZPX, 6 },
        additional_cycle1 = add_ZPX
        additional_cycle2 = INC

        case &HF7  '???              { "???", &a::XXX, &a::IMP, 6 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HF8  ' SED              { "SED", &a::SED, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = SED

        case &HF9  'SBC             { "SBC", &a::SBC, &a::ABY, 4 },
        additional_cycle1 = add_ABY
        additional_cycle2 = SBC

        case &HFA ' NOP                { "NOP", &a::NOP, &a::IMP, 2 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HFB  ' ???             { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX

        case &HFC  ' ???              { "???", &a::NOP, &a::IMP, 4 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = NOP

        case &HFD  ' SBC            { "SBC", &a::SBC, &a::ABX, 4 },
        additional_cycle1 =  add_ABX
        additional_cycle2 = SBC

        case &HFE  ' INC            { "INC", &a::INC, &a::ABX, 7 },
        additional_cycle1 = add_ABX
        additional_cycle2 = INC

        case &HFF ' ???             { "???", &a::XXX, &a::IMP, 7 },
        additional_cycle1 = addr_IMP
        additional_cycle2 = XXX


        end select

 end function



