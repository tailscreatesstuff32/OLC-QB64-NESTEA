







FUNCTION GetScreen ()
    GetScreen = sprScreen

END FUNCTION




FUNCTION GetColourFromPaletteRam~& (pal AS _UNSIGNED _BYTE, pixel AS _UNSIGNED _BYTE)


    GetColourFromPaletteRam~& = nes_pal1(ppuread(&H3F00~% + (_shl(pal,2)+ pixel), 0) and &H3F)


END FUNCTION



FUNCTION GetPatternTable~& (i AS _UNSIGNED _BYTE, pal AS _UNSIGNED _BYTE)
     dim tile_lsb as _unsigned _byte
     dim tile_msb as _unsigned _byte
     dim pixel as _unsigned _byte
     dim nOff as _unsigned integer
     dim ntileY as _unsigned integer
     dim ntileX as _unsigned integer

     dim row as _unsigned integer
     dim col as _unsigned integer



    orig_scrn& = _DEST
    _DEST sprPatternTable(i)

    FOR nTileY = 0 TO 16 - 1


        FOR nTileX= 0 TO 16 - 1
            nOff = nTileY * 256 + nTileX * 16

            FOR row = 0 TO 8 - 1

                tile_lsb = ppuRead(i * &H1000~% + nOff + row + 0, 0)
                tile_msb = ppuRead(i * &H1000~% + nOff + row + 8, 0)

                FOR col = 0 TO 8 - 1

                    pixel = (tile_lsb AND &H01) + (tile_msb AND &H01)
                    tile_lsb = _SHR(tile_lsb, 1)
                    tile_msb = _SHR(tile_msb, 1)



                    'TODO draw the pixel

                    PSET (nTileX * 8 + (7 - col), nTileY * 8 + row), GetColourFromPaletteRam(pal, pixel)


                NEXT col

            NEXT row
        NEXT nTileX

    NEXT nTileY
    _DEST orig_scrn&
    GetPatternTable~& = sprPatternTable(i)

END FUNCTION




FUNCTION GetNameTable~& (i AS _UNSIGNED _BYTE)

    GetNameTable~& = sprNameTable(i)

END FUNCTION






SUB ppu_cpuWrite (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)

    SELECT CASE addr

        CASE &H0000 ' control
            ppu_regs.control_reg = byte_data
            '  set_ppu_control_flags ppu_regs
        CASE &H0001 'mask
          ppu_regs.mask_reg = byte_data
        '  set_ppu_mask_flags ppu_regs
        CASE &H0002 'status
             ppu_regs.status_reg  =  byte_data
        CASE &H0003 'OAM address

        CASE &H0004 'OAM data

        CASE &H0005 'Scroll

        CASE &H0006 'PPU address

            IF address_latch = 0 THEN
               ppu_address = (ppu_address AND &HFF) OR (_SHL(byte_data, 8))
               address_latch = 1
            ELSE
               ppu_address = (ppu_address AND &HFF00~%)   OR byte_data
            ppu_address = ppu_address+1


                address_latch = 0
            END IF
        CASE &H0007 'PPU data
       ppuWrite ppu_address-1 , byte_data

            ppu_address = ppu_address+1


    END SELECT



END SUB


FUNCTION ppu_cpuRead~%% (addr AS _UNSIGNED INTEGER, bReadOnly AS _UNSIGNED _BYTE)

    DIM data_ppu AS _UNSIGNED _BYTE

    'SELECT CASE addr

    '    CASE &H0000 ' Control
    '     data_ppu = ppu_regs.control_reg


    ''    CASE &H0001 ' Mask
    '        data_ppu = ppu_regs.mask_reg

    ''    CASE &H0002 ' Status

    '      data_ppu = ppu_regs.status_reg


    '    CASE &H0003 ' OAM Address

    '    CASE &H0004 ' OAM Data

    '    CASE &H0005 ' Scroll

    '    CASE &H0006 ' PPU Address

    '    CASE &H0007 ' PPU Data
    'END SELECT


    SELECT CASE addr

        CASE &H0000 ' control

        CASE &H0001 'mask

        CASE &H0002 'status
            ppu_regs.flags_status.vertical_blank = 1
            set_ppu_status_flags ppu_regs
            data_ppu = (ppu_regs.status_reg AND &HE0~%) OR (ppu_data_buffer AND &H1F~%)

            ppu_regs.flags_status.vertical_blank = 0
            set_ppu_status_flags ppu_regs
            address_latch = 0

        CASE &H0003 'OAM address

        CASE &H0004 'OAM data

        CASE &H0005 'Scroll

        CASE &H0006 'PPU address

        CASE &H0007 'PPU data
            data_ppu = ppu_data_buffer
          ppu_data_buffer = ppuRead(ppu_address, 0)

           IF ppu_address > &H3F00~% THEN data_ppu = ppu_data_buffer

            ppu_address = ppu_address+1

        1
    END SELECT


    ppu_cpuRead~%% = data_ppu

END FUNCTION

SUB ConnectCartridge () 'dont need?

    'dont need?

END SUB


SUB ppuWrite (addr AS _UNSIGNED INTEGER, byte_data AS _UNSIGNED _BYTE)

    addr = addr AND &H3FFF~%

   IF cart_ppuWrite(addr, byte_data) THEN

    elseIF addr >= &H0000~% AND addr <= &H1FFF~% THEN

    '  tblPattern(_SHR(addr AND &H1000~%, 12), addr AND &H0FFF~%) = byte_data


    ELSEIF addr >= &H2000~% AND addr <= &H3EFF~% THEN



    ELSEIF addr >= &H3F00~%  AND addr <= &H3FFF THEN

        addr = addr AND &H1F~%
        IF addr = &H0010~% THEN addr = &H0000~%
        IF addr = &H0014~% THEN addr = &H0004~%
        IF addr = &H0018~% THEN addr = &H0008~%
        IF addr = &H001C~% THEN addr = &H000C~%
     tblPalette(addr) = byte_data


    END IF


END SUB


FUNCTION ppuRead~%% (addr AS _UNSIGNED INTEGER, bReadOnly AS _UNSIGNED _BYTE)
          dim data_ppu as _unsigned _byte
    addr = addr AND &H3FFF~%

   IF cart_ppuRead(addr, data_ppu) THEN

    elseIF addr >= &H0000~% AND addr <= &H1FFF~% THEN
     '   data_ppu = tblPattern(_SHR(addr AND &H1000~%, 12), addr AND &H0FFF~%)

    ELSEIF addr >= &H2000~% AND addr <= &H3EFF~% THEN

    ELSEIF addr >= &H3F00~% AND addr <= &H3FFF~% THEN

        addr = addr AND &H1F~%
        IF addr = &H0010~% THEN addr = &H0000~%
        IF addr = &H0014~% THEN addr = &H0004~%
        IF addr = &H0018~% THEN addr = &H0008~%
        IF addr = &H001C~% THEN addr = &H000C~%
       ' tblPalette(0)=32
        data_ppu = tblPalette(addr) ' and &H3F

        ' locate 0,0
      '   print hex$(data_ppu )
        ' end

    END IF


    ppuRead~%% = data_ppu

END FUNCTION

SUB PPU_clock ()
    orig_scrn& = _DEST
    _DEST nes_scrn
    'add screen noise

    IF Rand(0, 1) = 0 THEN
        col1& = nes_pal1(&H3F&)

    ELSE

        col1& = nes_pal1(&H30&)
    END IF
    'PSET (cycle - 1, scanline), col1&
    '    'cycle = 341
    '    'scanline = 261

    cycle = cycle + 1
    IF cycle >= 5 THEN
        cycle = 0

        scanline = scanline + 1
        IF scanline >= 5 THEN
            framecomplete = -1
            scanline = -1

        END IF
    END IF
    _DEST orig_scrn&

END SUB



sub set_ppu_status_flags(regs as PPUREGS )

         regs.status_reg = _shl(regs.flags_status.unused,4) or _shl(regs.flags_status.sprite_overflow,5) or  _shl(regss.flags_status.sprite_zero_hit,6) or  _shl(regs.flags_status.vertical_blank,7)
       '  _title str$(regs.status_reg)

end sub

'sub set_ppu_control_flags(regs as PPUREGS )

'         regs.status_reg = _shl(regs.flags_status.unused,4) or _shl(regs.flags_status.sprite_overflow,5) or  _shl(regss.flags_status.sprite_zero_hit,6) or  _shl(regs.flags_status.vertical_blank,7)
'       '  _title str$(regs.status_reg)

'end sub

'sub set_ppu_mask_flags(regs as PPUREGS )

'         regs.status_reg = _shl(regs.flags_mask.unused,4) or _shl(regs.flags_status.sprite_overflow,5) or  _shl(regss.flags_status.sprite_zero_hit,6) or  _shl(regs.flags_status.vertical_blank,7)
'       '  _title str$(regs.status_reg)

'end sub





'SUB set_ppu_status_flags (f AS _UNSIGNED _BYTE, bool AS _UNSIGNED _BYTE)
'    'SHARED cpu_regs AS regs_6502





'    IF bool THEN
'       ppu_regs.status_reg =  ppu_regs.status_reg OR f
'    ELSE
'         ppu_regs.status_reg =  ppu_regs.status_reg AND NOT f


'    END IF


'END SUB












